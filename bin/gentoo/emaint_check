#!/bin/bash

###################################################################################################
#  Checks if Any Maintenance is Due                                                               #
#                                                                                                 #
# Checks both the local machine and remote machines. Remote machines can go twice as long without #
# maintenance before this script complains.                                                       # 
###################################################################################################

# ---------- Global Variables ----------
max_update_days=7
scriptname="$(basename "$0")"
USAGE="usage: ${scriptname} [-d] [-h]"

read -r -d '' HELP << EOM
$USAGE
EOM

# ---------- Command-line Arguments ----------
eval set -- "$(getopt -o "d,h" -l "debug,help" -- "$@")"

while [[ -n "$1" ]]; do
    case $1 in
       -d|--debug )
           PS4='$LINENO: '
           set -x
           ;;
       -h|--help )
           echo "$HELP"
           exit 0
           ;;
       -- )
           shift
           break
           ;;
    esac
    shift
done

source /usr/lib/gutils.sh

# shellcheck disable=SC2034
secret_wrapper="emanage"
source /usr/lib/secret.sh

# ---------- Functions ----------
function warn_user() {
    action="$1"; shift
    hostname="$1"; shift
    days="$1"; shift

    notify-send -u critical -t 0 "Maintenance Overdue!" "You should ${action} ${hostname}.\n\n \
        It has been ${days} days since the 'emanage --${action}' command was last run."
}

function get_max_days() {
    action="$1"; shift
    case "${action}" in
        "update" )
            max="${max_update_days}"
            ;;
        "cleanup" )
            max="$((2*max_update_days))"
            ;;
    esac

    printf "${max}"
}

# ---------- Main ----------
# >>> LOCAL
for action in "update" "cleanup"; do
    days=$(emanage --days-since-last local --"${action}")
    max_days="$(get_max_days "${action}")"
    if [[ ${days} -ge "${max_days}" ]]; then
        warn_user "${action}" "this machine" "${days}"
    fi
done

# >>> REMOTE(S)
for line in $(emanage --days-since-last remote --update); do
    hostname="${line%:*}"
    days="${line#*:}"

    max_days="$(get_max_days update)"
    if [[ "${days}" -ge "$((2*max_days))" ]]; then
        warn_user "update" "@${hostname}" "${days}"
    fi
done
