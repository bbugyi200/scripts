#!/usr/bin/python3

"""Set Alarms Based on Upcoming Khal Events"""

import atexit
import collections
import datetime as dt
import os
import signal
import subprocess as sp
import sys
import time

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)
RUNTIME_DIR = gutils.xdg.init('runtime')
PID_FILE = '{}/pid'.format(RUNTIME_DIR)
FIFO_PATH = '{}/fifo'.format(RUNTIME_DIR)
TOMORROW_MARKER = '@'
today = dt.date.today()


def main():
    gutils.mkfifo(FIFO_PATH)
    stop_alarm()
    create_pidfile()

    event_list = get_raw_event_list()
    log.debug("Raw Event List: {}".format(event_list))

    event_list = get_NL_split_event_list(event_list)
    log.debug('Newline Split Event List: {}'.format(event_list))

    event_list = list(filter_allday_events(event_list))
    log.debug('Event List (without allday events): {}'.format(event_list))

    event_list = list(map(lambda event: event.split(maxsplit=1), event_list))
    log.debug('Double Split Event List: {}'.format(event_list))

    event_list = get_marked_event_list(event_list)
    log.debug('Marked Event List: {}'.format(event_list))

    events = get_unique_event_ordered_dict(event_list)
    log.debug('Unique Event List: {}'.format(events))

    for start, titles in events.items():
        title = ' + '.join(titles)

        cmd_list = ['alarm']
        opts = []

        if start[0] == TOMORROW_MARKER:
            start = start[1:]

            # check if day has changed
            current_day = dt.date.today().day
            if today.day == current_day:
                opts.extend(['-T'])

        opts.extend([start, title])
        cmd_list.extend(opts)

        with open(FIFO_PATH, 'w') as fifo:
            log.debug('Writing "{}" to {}.'.format(title, FIFO_PATH))
            fifo.write('"{}" at {}\n'.format(title, start))

        try:
            log.debug('Command List: %s', cmd_list)
            child_pid = os.fork()
            if child_pid == 0:
                os.execl('/usr/local/bin/alarm', *cmd_list)

            pid, status = os.waitpid(child_pid, 0)
        except sp.CalledProcessError:
            raise RuntimeError('Current alarm was interupted.')
        else:
            time.sleep(0.5)

    log.debug('No calendar events to set alarm for. Terminating...')


def get_raw_event_list():
    """Get raw output of khal command.

    Returns (str):
        Output of 'khal list' command.
    """
    end_date = dt.date.today() + dt.timedelta(days=2)
    end_date_string = end_date.strftime('%Y-%m-%d')
    cmd = "khal list --notstarted --format '{{start-time}} {{title}}' now {}"
    out = sp.check_output(cmd.format(end_date_string), shell=True)
    event_list = out.decode().strip()

    if event_list.strip().startswith('No'):
        sys.exit(0)

    return event_list


def get_NL_split_event_list(old_event_list):
    """Get event list split on newlines.

    Args:
        old_event_list (str): raw event list.

    Returns ([str]):
        A list of event strings.
    """
    event_list = old_event_list.split('\n')
    if 'Today' in event_list[0]:
        event_list = event_list[1:]
    return event_list


def get_marked_event_list(old_event_list):
    """Get event list with tomorrow markers added.

    Args:
        old_event_list ([[str]]): list of pairs for each event time and event name.

    Returns ([[str]]):
        A list of pairs for each event time and name (with markers added and 'Tomorrow' title
        event removed).
    """
    tomorrow_index = len(old_event_list)
    for i, event_pair in enumerate(old_event_list):
        event_time, _ = event_pair
        if 'Tomorrow,' == event_time:
            tomorrow_index = i
            break

    event_list = old_event_list[:tomorrow_index]
    event_list.extend([['{}{}'.format(TOMORROW_MARKER, start), title] for start, title in old_event_list[tomorrow_index + 1:]])
    return event_list


def get_unique_event_ordered_dict(old_event_list):
    """Get event list where each event time is only represented once.

    Args:
        old_event_list ([[str]]): list of pairs for each event time and event name.

    Returns ({str: {str}}):
        An OrderedDict where each event time is used as a key that maps to a set containing all
        event names that correspond to that event time.
    """
    event_list = collections.OrderedDict()
    for start1, _ in old_event_list:
        if start1 not in event_list:
            event_list[start1] = set()
            for start2, title in old_event_list:
                if start1 == start2:
                    event_list[start1].add(title)

    return event_list


def filter_allday_events(event_list):
    """Filters allday events from the event list.

    Yields:
        Events without any allday events.
    """
    for event in event_list:
        if event[0] != ' ':
            yield event


def create_pidfile():
    """Duplicate Process Management"""
    try:
        gutils.create_pidfile()
    except gutils.StillAliveException as e:
        log.debug('Previous instance of {} is still alive. Sending SIGTERM...'.format(os.path.basename(__file__)))
        os.kill(e.pid, signal.SIGTERM)
        time.sleep(1)
        create_pidfile()


def term_handler(signum, frame):
    """Signal Handler that Exits Gracefully"""
    sys.exit(1)


@atexit.register
def stop_alarm():
    """Exit Handler"""
    pid = os.fork()
    if pid == 0:
        os.system('alarm --stop')
        sys.exit(0)
    else:
        with open(FIFO_PATH, 'w') as fifo:
            fifo.write('\n')


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    args = parser.parse_args()

    signal.signal(signal.SIGTERM, term_handler)
    signal.signal(signal.SIGINT, term_handler)

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main()
