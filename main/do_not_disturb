#!/bin/bash

source bugyi.sh

read -r -d '' DOC <<EOM
Mute the system sound for a user-specified number of minutes / seconds.

Examples:
    # Mute the system volume for 10 minutes.
    ${SCRIPTNAME} 10

    # Mute the system volume for 30 seconds.
    ${SCRIPTNAME} 30s
EOM

function main() {
    parse_cli_args "$@"

    local orig_volume="$(current_volume)"

    if [[ "${orig_volume}" == "0" ]]; then
        die "The system volume is already muted (i.e. set to 0%%)."
    fi

    if [[ "${N}" == *"s" ]]; then
        local delay="${N::-1}"
        notify "Muting system volume for ${delay} seconds..."
    else
        local delay=$((N * 60))
        notify "Muting system volume for ${N} minutes..."
    fi

    set_volume 0%
    sleep "${delay}"

    local new_volume="$(current_volume)"
    if [[ "${new_volume}" != "0" ]]; then
        die "The system volume is no longer muted (${new_volume}%%). It was probably adjusted manually while we were waiting."
    fi

    notify "Unmuting system volume (setting back to ${orig_volume}%)..."
    set_volume "${orig_volume}%"
}

function parse_cli_args() {
    eval set -- "$(getopt -o "h,v" -l "help,verbose" -- "$@")"

    export USAGE_GRAMMAR=(
        "[-v] MINUTES"
        "[-v] SECONDS"
        "-h"
    )

    # shellcheck disable=SC2154
    read -r -d '' help <<EOM
$(usage)

${DOC}

Positional Arguments:
    MINUTES
        A positive integer. Will result in the system volume muting for MINUTES
        minutes.

    SECONDS
        A positive integer prepended to the 's' character. Will result in the
        system volume muting for SECONDS seconds.

Optional Arguments:
    -h | --help
        View this help message.

    -v | --verbose
        Enable verbose output. This option can be specified multiple times (e.g. -v, -vv, ...).
EOM

    VERBOSE=0
    while [[ -n "$1" ]]; do
        case $1 in
        -h | --help)
            echo "${help}"
            exit 0
            ;;
        -v | --verbose)
            VERBOSE=$((VERBOSE + 1))
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done

    if [[ "${VERBOSE}" -gt 1 ]]; then
        PS4='$LINENO: '
        set -x
    fi

    if [[ -z "$1" ]]; then
        die "$(usage)" 2
    fi

    N="$1"
    shift

    if [[ -n "$1" ]]; then
        emsg "Unexpected positional argument: '%s'" "$1"
        die "$(usage)" 2
    fi
}

function notify() {
    notify-send -t 3000 "${SCRIPTNAME}" "$@"
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    main "$@"
fi
