#!/usr/bin/env python

"""Zathura Helper Script. Used to Search for and then Open Documents in Zathura."""

import os
import signal
import subprocess as sp

import gutils

#######################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/pymodules/gutils  #
#######################################################################################

log = gutils.logging.getEasyLogger(__name__)
CACHE_FILE = '{}/recently-opened.txt'.format(gutils.xdg.getdir('data'))


def main():
    try:
        cmd = 'wmctrl -lx | grep zathura | tr -s " " | cut -d\' \' -f5- '\
              '| grep -o ".*\\.\\(pdf\\|djvu\\|epub\\)"'
        decoded = check_output(cmd)
        open_docs = decoded.split('\n')
        log.debug('Open Docs: {}'.format(' '.join(open_docs)))
    except sp.CalledProcessError:
        open_docs = None
        log.debug('No documents are currently open in zathura.')

    cmd = 'find /home/bryan/Dropbox /home/bryan/Downloads -name "*.pdf" -o '\
          '-name "*.epub" -o -name "*.djvu" -o -name "*.ps"'
    all_docs = check_output(cmd)

    with open(CACHE_FILE, 'r') as f:
        cached_docs = [x.strip() for x in f.readlines()]

    ordered_docs = promote_cached_docs(all_docs.split('\n'), cached_docs)

    if open_docs:
        ordered_docs = demote_open_docs(ordered_docs, open_docs)

    doc_options = '\n'.join(ordered_docs)

    cmd_fmt = 'printf "{}" | rofi -p "Document" -m -4 -dmenu -i'
    choice = check_output(cmd_fmt.format(doc_options))

    add_to_cache(choice)

    active_window_class = check_output('active_window_class')
    if active_window_class == 'Zathura':
        pid = int(check_output('active_window_pid'))
        log.debug('Killing Zathura Instance: {}'.format(pid))
        os.kill(pid, signal.SIGTERM)

    log.debug('Opening {} in zathura...'.format(choice))
    sp.Popen(['zathura', choice], stdout=sp.DEVNULL, stderr=sp.STDOUT)


def promote_cached_docs(docs, cached_docs):
    """Docs in Cache File are Brought to the Top of the List of Options"""
    D = docs[:]
    for c in list(reversed(cached_docs)):
        if c in D:
            D.remove(c)
            D.insert(0, c)
    return D


def demote_open_docs(docs, open_docs):
    """Open Docs are Moved to the Bottom of the List of Options"""
    D = docs[:]
    E = []
    for odoc in open_docs:
        for doc in docs:
            if odoc in doc:
                try:
                    D.remove(doc)
                    E.append(doc)
                except ValueError:
                    # Protects against multiple attempts to remove the same doc which happens when
                    # the same doc is opened up in multiple different instances.
                    pass

    D.extend(E)
    return D


def add_to_cache(doc):
    """Adds/moves doc to the Top of the Cache File"""
    log.debug('Adding {} to cache file...'.format(doc))
    if os.path.isfile(CACHE_FILE):
        with open(CACHE_FILE, 'r') as f:
            cached_docs = f.read().strip().split('\n')

        if doc in cached_docs:
            cached_docs.remove(doc)

        cached_docs.insert(0, doc)

        with open(CACHE_FILE, 'w') as f:
            f.write('\n'.join(cached_docs[:100]))
    else:
        with open(CACHE_FILE, 'w') as f:
            f.write(doc)


def check_output(cmd):
    """Wrapper for subprocess.check_output

    Args:
        cmd (str): command string.
    """
    out = sp.check_output(cmd, shell=True)
    return out.decode().strip()


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main()
