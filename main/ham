#!/bin/bash
PID_FILE=/tmp/hamster.pid
LOG_FILE=/tmp/hamster.log
SECONDS=90

print_panel() {
	/home/bryan/Dropbox/scripts/python/panel-hamster.py
}

# ---------- Command Line Arguments ----------
eval set -- $(getopt -o 'di:' -l 'debug,idle-time:' -- "$@")

debug=0
while [[ -n "$1" ]]; do
	case $1 in
		'-d' | '--debug' )
			debug=1;;
		'-i' | '--idle-time' )
			MINUTES=$2
			SECONDS=$((MINUTES * 60))
			shift;;
		'--' )
			shift
			break;;
	esac
	shift
done


MAX=$((SECONDS * 1000))
action=$1


# ---------- Redirect STDOUT and STDERR ----------
if [[ $debug -eq 0 ]]; then
	exec 2>&1
	exec >> $LOG_FILE
fi


# ---------- Check for PID File ----------
if [[ -f $PID_FILE ]]; then
	PID=$(cat $PID_FILE)
	kill $PID
	if [[ $? != 0 ]]; then
		logger "ham: failed to kill $PID"
		rm $PID_FILE
		exit 1
	fi
fi

COUNT=0
while [[ -f $PID_FILE ]]; do
	sleep 0.5
	((COUNT++))
	if ((COUNT > 10)); then
		rm $PID_FILE
		logger "ham: $PID_FILE still exists. Timing out after $COUNT iterations."
		exit 1
	fi
done

# ---------- Handle Actions ----------
if [[ $action == "stop" ]]; then
	hamster stop
	print_panel
	exit 0
fi


if [[ $action == "start" ]]; then
	trap "rm $PID_FILE && kill 0" EXIT

	if [[ "$2" == [0-9] ]]; then
		activity=$(hamster activities | sort | sed "$2q;d")
	elif [[ -n "$2" ]]; then
		activity=$2
	else
		activity=$(hamster activities | sort | dmenu -i -m 0)
	fi

	hamster "$action" "$activity" "${@:3}"

	if [[ $? -ne 0 ]]; then
		logger "ham: hamster command failed"
		exit 1
	else
		print_panel
	fi

	while true; do
		sleep 30
		if [[ $(xprintidle) -ge $MAX ]]; then
			hamster stop && print_panel
			printf "Hamster \'$activity\' went idle at: %s\n" "$(date +'%m/%d/%Y %T %Z')"
		else
			continue
		fi

		# Only reaches this point if Idle
		timeout_time=$(date --date="30 minutes" +%s)
		while true; do
			sleep 1
			if [[ $(xprintidle) -le $MAX ]]; then
				hamster $action $activity && print_panel
				printf "Hamster \'$activity\' resumed at: %s\n\n" "$(date +'%m/%d/%Y %T %Z')"
				break
			elif [[ $(date +%s) -ge $timeout_time ]]; then
				printf "Hamster \'$activity\' timed out at: %s\n\n" "$(date +'%m/%d/%Y %T %Z')"
				exit 1
			fi
		done
	done
fi &

# ---------- Put PID of forked 'if' statement into PID File  ----------
echo $! > $PID_FILE
