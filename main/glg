#!/bin/bash

# shellcheck disable=SC2086

read -r -d '' DOC <<EOM
Wrapper around \`git log\`. Helpful when you wish to review only the commits
added in the current branch.
EOM

source gutils.sh

SCRIPTNAME="$(basename "$0")"

OPTS="--color=always "
STAT_OPTS="--stat --summary"
DIFF_OPTS="-p --cc"
ONELINE_OPTS="--abbrev=4 --oneline --decorate"

function main() {
    parse_cli_args "$@"

    master_branch="${MASTER_BRANCH:-master}"
    if [[ "$(git rev-parse "${master_branch}")" == "$(git rev-parse HEAD)" ]]; then
        TARGET_BRANCH=HEAD
    else
        TARGET_BRANCH="${master_branch}"..HEAD
    fi

    if [[ -n "${arg}" ]]; then
        if [[ "${arg}" =~ ^[1-9][0-9]*p$ ]] || [[ "${arg}" == "p" ]]; then
            N="$(branch_commit_count)"
            if [[ "${arg}" != "p" ]]; then
                n="${arg%p}"
                if [[ "${n}" -lt "${N}" ]] || [[ "${N}" -eq 0 ]]; then
                    N="${n}"
                fi
            fi

            C="-"

            i=0
            while [[ "${i}" -lt "${N}" ]]; do
                idx=$((i + 1))

                header_middle_fmt="$C$C$C$C$C$C$C Commit %d of %d $C$C$C$C$C$C$C"
                num_of_percent_signs=2

                header_bar=""

                j=0
                while [[ "${j}" -lt $((${#header_middle_fmt} - num_of_percent_signs)) ]]; do
                    header_bar+="${C}"
                    j=$((j + 1))
                done

                for D in {10,100}; do
                    if [[ "${idx}" -ge "${D}" ]]; then
                        header_bar+="${C}"
                    fi

                    if [[ "${N}" -ge "${D}" ]]; then
                        header_bar+="${C}"
                    fi
                done

                header_fmt="$(printf "%%s\\n%s\\n%%s" "${header_middle_fmt}")"
                OPTS+="--skip=${i} --max-count=1 ${STAT_OPTS} ${DIFF_OPTS} "
                {
                    printf \
                        "${header_fmt}\n" \
                        "${header_bar}" \
                        "${idx}" \
                        "${N}" \
                        "${header_bar}"
                    git_log
                } | less
                i="$((i + 1))"
            done
        else
            OPTS+="--graph ${STAT_OPTS} "
            if [[ "${arg}" =~ ^[0-9]+$ ]]; then
                N="${arg}"
                if [[ "${N}" -eq 0 ]]; then
                    N="$(branch_commit_count)"
                fi

                OPTS+="--max-count=${N} "
            elif [[ "${arg}" == "+" ]]; then
                :
            elif [[ "${arg}" == "++" ]]; then
                OPTS+="${DIFF_OPTS} "
            else
                printf 1>&2 "[ERROR] Unexpected argument: '%s'\n" "${arg}"
                exit 1
            fi

            git_log | less
        fi
    elif [[ "${#GLOG_ARGS[@]}" -ne 0 ]]; then
        OPTS+="--graph "
        git_log | less
    else
        OPTS+="${ONELINE_OPTS} "
        git_log | nl -s ':  ' -v 0 | less
    fi
}

function parse_cli_args() {
    export USAGE_GRAMMAR=(
        "[-d] [git-log OPTIONS]"
        "[-d] +[+] [git-log OPTIONS]"
        "[-d] N [git-log OPTIONS]"
        "[-d] [N]p [git-log OPTIONS]"
        "-h"
    )

    read -r -d '' help <<EOM
$(usage)

${DOC}

Optional Arguments:
    -d | --debug
        Enable debug mode.

    -h | --help
        View this help message.

Positional Arguments:
    +
        Show file stats for all commits added in this branch.

    ++
        Show file stats and diffs for all commits added in this branch.

    N
        Show the last N commits (where N is some integer). When N==0, we reset
        N to the number of commits on the current branch that differ from
        the master branch.

    [N]p
        Show the last N commits (where N is some integer) OR, if N is not
        given, all commits added in this branch. These commits are shown with
        diffs and are displayed seperately, one at a time.
EOM

    while [[ -n "$1" ]]; do
        case $1 in
        -d | --debug)
            debug=true
            ;;
        -h | --help)
            echo "${help}"
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
        esac
        shift
    done

    if [[ "${debug}" = true ]]; then
        PS4='$LINENO: '
        set -x
    fi

    if [[ -n "$1" ]] && [[ "$1" != "-"* ]]; then
        arg="$1"
        shift
    fi

    GLOG_ARGS=("$@")
}

function git_log() {
    git log ${OPTS} "${TARGET_BRANCH}" "${GLOG_ARGS[@]}"
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    main "$@"
fi
