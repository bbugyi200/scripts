#!/usr/bin/env python

"""epuse is similar to the euse tool but is meant to manage per-package USE flags"""

import enum
import shutil
import subprocess as sp  # noqa: F401

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)
pack_use_fpath = "/etc/portage/package.use"


class Action(enum.Enum):
    """Action Flags"""
    enable = enum.auto()
    disable = enum.auto()
    prune = enum.auto()


class PackageNotFound(RuntimeError):
    """Raised when <category>/<package> is not found in /etc/portage/package.use."""


def main():
    if args.category is None:
        out = sp.check_output(['ecat', args.package])
        category = out.decode().strip()
    else:
        category = args.category

    use_flags = args.use_flags

    if args.action_flag is Action.disable:
        use_flags = ['-{}'.format(uflag) for uflag in use_flags]

    action = {Action.enable: enable_flag,
              Action.disable: enable_flag,
              Action.prune: prune_flag}[args.action_flag]

    for uflag in use_flags:
        action(uflag, category)


def enable_flag(uflag, category):
    try:
        current_uflags = _get_uflags(category)
    except PackageNotFound:
        current_uflags = []

    if uflag in current_uflags:
        log.error('The %s USE flag is already set for %s/%s.',
                  uflag, category, args.package)
        return

    reverse_uflag = _get_reverse_uflag(uflag)

    if reverse_uflag in current_uflags:
        log.info("The {0}/{1} package already has the {2} USE flag set. "
                 "Pruning {2} from package first...".format(category, args.package, reverse_uflag))
        prune_flag(reverse_uflag, category)
        current_uflags.remove(reverse_uflag)

    _set_uflags(current_uflags + [uflag], category)

    log.info('The %s USE flag has been enabled for %s/%s.',
             uflag, category, args.package)


def prune_flag(uflag, category):
    try:
        current_uflags = _get_uflags(category)
    except PackageNotFound:
        _log_uflag_not_set(uflag, category)

    reverse_uflag = _get_reverse_uflag(uflag)
    if all(uf not in current_uflags for uf in [uflag, reverse_uflag]):
        _log_uflag_not_set(uflag, category)
        return

    shutil.copy(pack_use_fpath, '/tmp/package.use.backup')

    new_uflags = current_uflags[:]

    try:
        new_uflags.remove(uflag)
    except ValueError:
        pass

    try:
        new_uflags.remove(reverse_uflag)
    except ValueError:
        pass

    _set_uflags(new_uflags, category)

    log.info('The %s USE flag has been pruned from %s/%s.',
             uflag, category, args.package)


def _get_uflags(category):
    for line in open(pack_use_fpath, 'r'):
        if '{}/{}'.format(category, args.package) in line:
            return line.split()[1:]
        elif line.strip() == '':
            break

    raise PackageNotFound()


def _set_uflags(uflags, category):
    new_lines = []
    package_lines = []
    end_section = found = False
    modified_line = '{}/{} {}\n'.format(category, args.package,
                                        ' '.join(sorted(uflags, key=lambda x: x.lstrip('-'))))
    for line in open(pack_use_fpath, 'r'):
        if end_section or line[0] == '#':
            new_lines.append(line)
        elif line.strip() == '':
            end_section = True
            if not found and uflags:
                package_lines.append(modified_line)
            new_lines.extend(sorted(package_lines))
            new_lines.append(line)
        elif line.startswith('{}/{}'.format(category, args.package)):
            found = True
            if uflags:
                package_lines.append(modified_line)
        else:
            package_lines.append(line)

    with open(pack_use_fpath, 'w') as f:
        f.writelines(new_lines)


def _get_reverse_uflag(uflag):
    if uflag[0] == '-':
        return uflag[1:]
    else:
        return '-' + uflag


def _log_uflag_not_set(uflag, category):
    log.error('The %s USE flag is not currently set for %s/%s.',
              uflag, category, args.package)


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('category', nargs='?', help='The name of the package\'s category.')
    parser.add_argument('package', help='The name of the package.')
    parser.add_argument('use_flags', nargs='+', help='The USE flag(s).')
    action_group = parser.add_mutually_exclusive_group()
    action_group.add_argument('-E', dest='action_flag', action='store_const', const=Action.enable,
                              help='Enable <use_flags> for <package>.')
    action_group.add_argument('-D', dest='action_flag', action='store_const', const=Action.disable,
                              help='Disable <use_flags> for <package>.')
    action_group.add_argument('-P', dest='action_flag', action='store_const', const=Action.prune,
                              help='Prune any mention of <use_flags> from /etc/portage/package.use/<package>.')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main()
