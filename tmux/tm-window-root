#!/usr/bin/env python3

"""Gets / Sets Root Directory of Tmux Window (based on tmuxinator config)"""

from dataclasses import dataclass
import os
import subprocess as sp
import sys
from typing import Any, Dict, List, Optional, Sequence

from bugyi import cli
from bugyi.core import main_factory
from bugyi.types import PathLike
from loguru import logger as log  # pylint: disable=unused-import
import yaml


@dataclass(frozen=True)
class Arguments(cli.Arguments):
    session_name: str
    window_index: int
    new_root: Optional[str]


def parse_cli_args(argv: Sequence[str]) -> Arguments:
    parser = cli.ArgumentParser()
    parser.add_argument("session_name", help="Name of tmux session.")
    parser.add_argument(
        "window_index", type=int, help="Index of the tmux window."
    )
    parser.add_argument(
        "-s",
        "--set",
        dest="new_root",
        help=(
            "Set window-specific root directory for the specified "
            "Tmuxinator session."
        ),
    )

    args = parser.parse_args(argv[1:])
    kwargs = dict(args._get_kwargs())

    return Arguments(**kwargs)


def run(args: Arguments) -> int:
    mux_yaml_path = "{}/.config/tmuxinator/{}.yml".format(
        os.environ["HOME"], args.session_name
    )
    all_windows = get_all_windows(mux_yaml_path, args.session_name)

    try:
        _window_dict = all_windows[args.window_index - 1]
        log.trace(f"{_window_dict=}")

        window_name = next(iter(_window_dict))
        log.trace(f"{window_name=}")

        window_dict = _window_dict[window_name]
        log.trace(f"{window_dict=}")
    except IndexError:
        window_dict = dict()

    if args.new_root is None:
        getdir(args.session_name, window_dict)
    else:
        setdir(mux_yaml_path, args.session_name, window_name, args.new_root)

    return 0


def getdir(session_name: str, window_dict: Dict[str, str]) -> None:
    """
    Get Root Directory for @session_name where @window_dict is a dictionary of
    configurations set under the desired windows heading in the YAML
    configuration.
    """
    rootdir = get_rootdir(session_name, window_dict)
    print(rootdir, end="")


def setdir(
    mux_yaml_path: PathLike,
    _session_name: str,
    window_name: str,
    new_root: str,
) -> None:
    """
    Set the Root Directory Name for @_session_name.@window_name to @new_root.
    """
    mux_yaml_path = str(mux_yaml_path)

    all_lines = []
    found = False
    for line in open(mux_yaml_path, "r"):
        if found and line.startswith("    -"):
            found = False

        if not found or not line.startswith("        root:"):
            all_lines.append(line)

        if line.startswith("    - {}:".format(window_name)):
            all_lines.append("        root: {}\n".format(new_root))
            found = True

    with open(mux_yaml_path, "w") as f:
        f.writelines(all_lines)


def get_all_windows(
    mux_yaml_path: PathLike, _session_name: str
) -> List[Dict[str, Any]]:
    """Returns dictionary of all windows for the given @_session_name."""
    with open(mux_yaml_path) as f:
        raw_dict = yaml.safe_load(f)
    return raw_dict["windows"]


def get_rootdir(session_name: str, window_dict: Dict[str, str]) -> str:
    """Returns the final root directory path."""
    if "root" in window_dict:
        rootdir = window_dict["root"]
        return rootdir.replace("~", os.environ["HOME"])
    else:
        out = sp.check_output(["tm-session-root", "--get", session_name])
        return out.decode().strip()


main = main_factory(parse_cli_args, run)
if __name__ == "__main__":
    sys.exit(main())
