#!/usr/bin/env python

""" Archive Utility. Used to Archive and Compress Local Files and Directories. """

import argparse
from enum import Enum, auto
import os
import shutil
import subprocess as sp
import sys


ARCH_DIR = 'archive'
GLOB_ARCH_DIR = '/media/bryan/hercules/archive'
TARGZ_FILE = '.archive.tar.gz'


class Action(Enum):
    """ Action Flags """
    ARCHIVE = auto()
    COMPRESS = auto()
    EXTRACT = auto()
    GLOBAL = auto()


def archive(auto_compress=False):
    """ Archive Files/Directories """
    if not args.files:
        print("Must provide files/directories to archive!\n", file=sys.stderr)
        sys.exit(1)

    for f in args.files:
        if not os.path.exists(f):
            print("{} does not exist!\n".format(f), file=sys.stderr)
            sys.exit(2)

    if not os.path.isdir(ARCH_DIR):
        auto_compress = True
        if os.path.isfile(TARGZ_FILE):
            extract(verbose=False)
        else:
            os.makedirs(ARCH_DIR)

    for f in args.files:
        shutil.move(f, ARCH_DIR)

    if auto_compress:
        compress(verbose=False)


def compress(verbose=True):
    """ Compress Archive Folder """
    flags = 'czvf' if verbose else 'czf'
    sp.check_call(['tar', flags, TARGZ_FILE, ARCH_DIR])
    shutil.rmtree(ARCH_DIR)


def extract(verbose=True):
    """ Extract Archive Folder """
    flags = 'xzvf' if verbose else 'xzf'
    sp.check_call(['tar', flags, TARGZ_FILE])
    os.remove(TARGZ_FILE)


def move_to_global():
    """ Move Archived Files to Global Archive """
    if not os.path.isdir(ARCH_DIR):
        if os.path.isfile(TARGZ_FILE):
            extract(verbose=False)
        elif not args.files:
            print("Neither an {} directory nor an {} file exist!\n\nEither create a local archive before using the -G option, or provide the file(s) you would like to archive via the command line! (e.g. 'arch -G <file1> ... <fileN>').".format(ARCH_DIR, TARGZ_FILE), file=sys.stderr)
            sys.exit(1)

    cwd = os.getcwd()
    global_replica = '{}/{}'.format(GLOB_ARCH_DIR, cwd[1:])
    if not os.path.isdir(global_replica):
        os.makedirs(global_replica)

    for f in args.files:
        shutil.move(f, global_replica)

    if not os.path.isdir(ARCH_DIR):
        sys.exit(0)

    for f in os.listdir(ARCH_DIR):
        shutil.move('{}/{}'.format(ARCH_DIR, f), global_replica)

    os.rmdir(ARCH_DIR)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('files', nargs=argparse.REMAINDER, help='file(s) to archive')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('-c', dest='action', action='store_const', const=Action.COMPRESS, help='compress archive directory')
    group.add_argument('-x', dest='action', action='store_const', const=Action.EXTRACT, help='extract archive directory')
    group.add_argument('-G', dest='action', action='store_const', const=Action.GLOBAL, help='move local archive to global archive')
    group.set_defaults(action=Action.ARCHIVE)

    args = parser.parse_args()

    {Action.ARCHIVE: archive,
     Action.COMPRESS: compress,
     Action.EXTRACT: extract,
     Action.GLOBAL: move_to_global}[args.action]()
