#!/usr/bin/env python

import datetime as dt
import subprocess as sp
import re


def _get_tag_time(tag, interval):
    assert interval == 'day' or interval == 'week', 'Interval must be in {day,week}'
    now = dt.datetime.now().astimezone(dt.timezone.utc)

    if interval == 'week':
        date = now - dt.timedelta(days=7)
    elif interval == 'day':
        if now.hour < 10:
            date = now - dt.timedelta(days=1)
        else:
            date = now

    start = '{0}-{1:02d}-{2:02d}T10:00:00Z'.format(date.year, date.month, date.day)
    child = sp.Popen(['timew', 'summary', 'from', start, 'to', 'tomorrow', tag], stdout=sp.PIPE)
    output = child.communicate()[0].decode()

    if output.startswith('No'):
        return '0:00:00'

    pttrn = r'[\s\S]*([0-9\s][0-9]:[0-9][0-9]:[0-9][0-9])[^A-Za-z][\s\S]*?'
    match = re.findall(pttrn, output)[0]

    return match.strip()


def _style_time(time_str):
    col = time_str.find(':')

    hours = int(time_str[:col])
    minutes = int(time_str[col + 1:col + 3])

    styled = hours
    styled += minutes / 60
    return '{0:.1f}h'.format(styled)


def styled_tag_time(t, i):
    return _style_time(_get_tag_time(t, i))


def add_times(*tag_times):
    totaltime = 0
    for tt in tag_times:
        totaltime += float(tt[:-1])
    return '{0:.1f}h'.format(float(totaltime))


def parse_status(status):
    pttrn = r'Tracking (?:([A-Za-z0-9\. ]*)|"([^"]*)"){2}\n[\s\S]*([0-9]?[0-9]:[0-9][0-9]:[0-9][0-9])'
    tags, project, raw_currtime = re.findall(pttrn, status)[0]

    if len(project) > 65:
        project = project[:65]
        project = project[:project.rfind(' ')] + '...'
    project = project.replace('Project: ', '')
    project = project.strip('[]')

    currtime = _style_time(raw_currtime)

    all_tags = tags.split()
    if all_tags:
        primary_tag = max(all_tags, key=lambda x: len(x))
    else:
        primary_tag = ''

    return project, primary_tag, currtime


if __name__ == "__main__":
    child = sp.Popen(['timew'], stdout=sp.PIPE)
    output = child.communicate()[0].decode()

    study_week = styled_tag_time('Study', 'week')
    dev_week = styled_tag_time('Dev', 'week')
    meta_week = styled_tag_time('Meta', 'week')

    if child.returncode:
        study_day = styled_tag_time('Study', 'day')
        dev_day = styled_tag_time('Dev', 'day')
        meta_day = styled_tag_time('Meta', 'day')
        totaltime = add_times(study_week, dev_week, meta_week)
        fmt = 'Study:  ({} / {})        Dev:  ({} / {})        Meta:  ({} / {})             [{}]'

        print(fmt.format(study_day, study_week,
                         dev_day, dev_week,
                         meta_day, meta_week,
                         totaltime))
    else:
        project, tag, currtime = parse_status(output)
        daytime = styled_tag_time(tag, 'day')
        weektime = styled_tag_time(tag, 'week')

        try:
            period_index = tag.index('.')
            parent_tag = tag[:period_index]
            pdaytime = styled_tag_time(parent_tag, 'day')  # parent daytime
            totaltime = styled_tag_time(parent_tag, 'week')
        except ValueError:
            parent_tag = ''

        fmt = '{tag}          "{project}"          ({currtime} / {daytime} / {weektime})'
        format_opts = {'project': project,
                       'tag': tag.upper(),
                       'currtime': currtime,
                       'daytime': daytime,
                       'weektime': weektime}

        if parent_tag != '':
            fmt = fmt + '                [{pdaytime} / {totaltime}]'
            format_opts['pdaytime'] = pdaytime
            format_opts['totaltime'] = totaltime

        print(fmt.format(**format_opts))
