#!/usr/bin/env python

"""Polls and Parses `timew` Command for use with Panel Bar.

I pity those who might come across this code by mere happenstance. Please do not try to replicate
any of the atrocities you might find below.

Know that I am not proud of what you have seen here today. Know that I am sorry.
"""

import datetime as dt
import subprocess as sp
import sys  # noqa: F401
import threading
import re
import queue


timew_queue = queue.Queue()
tag_times = [None] * 4


def main():
    timew_tt_thread('Study', 'week', 0)
    timew_tt_thread('Dev', 'week', 1)

    child = sp.Popen(['timew'], stdout=sp.PIPE)
    output = child.communicate()[0].decode()

    if child.returncode:
        timew_tt_thread('Study', 'day', 2)
        timew_tt_thread('Dev', 'day', 3)

        fmt = 'Study: ({} / {})   Dev: ({} / {})   [{}]'

        totaltime = get_totaltime()
        print(fmt.format(tag_times[2], tag_times[0], tag_times[3], tag_times[1], totaltime))
    else:
        project, tag, currtime = parse_status(output)

        try:
            index = tag.index('.')
        except ValueError:
            index = len(tag)

        parent_tag = tag[:index]
        timew_tt_thread(parent_tag, 'day', 2)
        timew_tt_thread(parent_tag, 'week', 3)

        totaltime = get_totaltime()

        fmt = '"{project}"'

        format_opts = {'project': project,
                       'tag': parent_tag,
                       'currtime': currtime,
                       'totaltime': totaltime}

        if parent_tag != '':
            format_opts['pdaytime'] = tag_times[2]
            format_opts['ptotaltime'] = tag_times[3]

            fmt = fmt + ('   '
                         '({tag}: {currtime} / {pdaytime} / {ptotaltime})   [{totaltime}]')

        print(fmt.format(**format_opts))


def get_totaltime():
    timew_queue.join()
    return add_times(tag_times[0], tag_times[1])


def timew_tt_thread(tag, interval, index):
    """Timew Tag Time Thread"""
    t = threading.Thread(target=insert_tag_time, args=(tag, interval, index), daemon=True)
    t.start()


def insert_tag_time(tag, interval, index):
    timew_queue.put(index)

    tag_time = styled_tag_time(tag, interval)
    tag_times[index] = tag_time

    timew_queue.get()
    timew_queue.task_done()


def styled_tag_time(tag, interval):
    tag_time = _get_tag_time(tag, interval)
    return _style_time(tag_time)


def _style_time(time_str):
    col = time_str.find(':')

    hours = int(time_str[:col])
    minutes = int(time_str[col + 1:col + 3])

    styled = hours
    styled += minutes / 60
    return '{0:.1f}h'.format(styled)


def _get_tag_time(tag, interval):
    try:
        assert interval == 'day' or interval == 'week', 'Interval must be in {day,week}'
    except AssertionError as e:
        raise ValueError(str(e))

    today = dt.date.today()

    if interval == 'week':
        # Last Monday
        date = today - dt.timedelta(days=today.weekday())
    elif interval == 'day':
        date = today

    start = '{0}-{1:02d}-{2:02d}T00:00:00'.format(date.year, date.month, date.day)
    child = sp.Popen(['timew', 'summary', 'from', start, 'to', 'tomorrow', tag], stdout=sp.PIPE)
    output = child.communicate()[0].decode()

    if output.startswith('No'):
        return '0:00:00'

    pttrn = r'[\s\S]*([0-9\s][0-9]:[0-9][0-9]:[0-9][0-9])[^A-Za-z][\s\S]*?'
    match = re.findall(pttrn, output)[0]

    return match.strip()


def add_times(*tag_times):
    totaltime = 0
    for tt in tag_times:
        totaltime += float(tt[:-1])
    return '{0:.1f}h'.format(float(totaltime))


def parse_status(status):
    status_list = status.strip().split('\n')
    head, tail = status_list[0], status_list[-1]

    head_list = head.split()

    for i, H in enumerate(head_list):
        if '"' in H:
            last_tag = i
            break

    tags = ' '.join(head_list[1:last_tag])
    project = ' '.join(head_list[3:]).replace('"', '')
    raw_currtime = tail.split()[-1]

    max_length = 35
    if len(project) > max_length:
        project = project[:max_length]
        project = project + '...'
    project = project.replace('Project: ', '')
    project = project.strip('[]')

    currtime = _style_time(raw_currtime)

    all_tags = tags.split()
    if all_tags:
        primary_tag = max(all_tags, key=lambda x: len(x))
    else:
        primary_tag = ''

    return project, primary_tag, currtime


if __name__ == "__main__":
    main()
