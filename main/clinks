#!/bin/bash

read -r -d '' doc <<EOM
Use 'stow' Command to Create Symlinks for All of My Dotfiles and Scripts
EOM

source gutils.sh

SYNC="${HOME}"/Sync

function main() {
    # Check if Running at Work
    SYS_INFO="$(uname -a)"
    if [[ "${SYS_INFO}" == *"Darwin"* ]]; then
        AT_WORK=true
        GETOPT=/usr/local/Cellar/gnu-getopt/2.33.2/bin/getopt
    else
        GETOPT=/usr/bin/getopt
    fi

    parse_cli_args "$@"

    # ----- mkdir Commands
    # Make sure that certain directories are not symlinked directly.
    # >>> $HOME directories
    home_dirs=(".vim" ".ssh")
    for D in "${home_dirs[@]}"; do
        mkdir "${HOME}"/"${D}" &>/dev/null
    done

    # >>> User Data Directories
    data_dirs=("qutebrowser" "okular" "applications")
    for D in "${data_dirs[@]}"; do
        mkdir "${HOME}"/.local/share/"${D}" &>/dev/null
    done

    # ----- Cleanup Commands
    if [[ "${SAFE}" = true ]]; then
        printf "%s: Deleting all .mypy_cache/ directories...\n" "${SCRIPTNAME}"
        find /home/bryan/Sync/bin -type d -name ".mypy_cache*" -exec sudo /bin/rm -rf {} \; &>/dev/null
    fi

    # ----- Main Logic
    if [[ "${AT_WORK}" == true ]]; then
        stow_it "${SYNC}/bin/macos" "$HOME/.local/bin"
    else
        # >>> Other Directories
        mkdir -p /usr/share/rlwrap/{filters,completions} &>/dev/null

        ##### ETC
        if [[ $(hostname) == "athena" ]]; then
            stow_it "${SYNC}/bin/cron.jobs" "/etc"
        fi

        ##### SCRIPTS
        if [[ "${SYS_INFO}" == *"gentoo"* ]]; then
            stow_it "${SYNC}/bin/gentoo" "$HOME/.local/bin"
        fi

        if [[ "${SYS_INFO}" == *"Debian"* ]]; then
            stow_it "${SYNC}/bin/debian" "$HOME/.local/bin"
        fi

        ##### MODULES / LIBRARIES / HEADERS
        stow_it "${SYNC}/bin/xmonad" "$HOME/.local/bin"
        stow_it "${SYNC}/lib/python" "/usr/local/lib/python"
        stow_it "${SYNC}/lib/C" "/usr/local/lib"
        stow_it "${SYNC}/lib/zsh" "/usr/local/lib"
        stow_it "${SYNC}/src" "/usr/local/src"
        stow_it "${SYNC}/include" "/usr/local/include"

        ##### DOTFILES
        stow_it "${SYNC}/usr" "/usr"
    fi

    ##### SCRIPTS
    stow_it "${SYNC}/bin/awk" "$HOME/.local/bin"
    stow_it "${SYNC}/bin/GTD" "$HOME/.local/bin"
    stow_it "${SYNC}/bin/main" "$HOME/.local/bin"
    stow_it "${SYNC}/bin/tmux" "$HOME/.local/bin"
    stow_it "${SYNC}/bin/vim" "$HOME/.local/bin"
    stow_it "${SYNC}/bin/zathura" "$HOME/.local/bin"

    ##### DOTFILES
    stow_it "${SYNC}/home" "${HOME}"

    ##### PROJECTS
    stow_it "${SYNC}/var/projects" "$HOME/projects"

    if [[ "${AT_WORK}" = true ]]; then
        rm ~/.xinitrc
    fi
}

function parse_cli_args() {
    eval set -- "$("${GETOPT}" -o "d,h,s,v" -l "debug,help,safe,verbose" -- "$@")"

    export USAGE_GRAMMAR=(
        "[-d] [-v] [STOW_FLAG]"
        "-h"
    )

    # shellcheck disable=SC2154
    read -r -d '' help <<EOM
$(usage)

${doc}

Positional Arguments:
    STOW_FLAG       Option flag to pass to the 'stow' command. Defaults to '-R'.

Optional Arguments:
    -d | --debug
        Enable debug mode.

    -h | --help
        View this help message.

    -s | --safe
        Take extra steps to ensure stowing all directories works properly. This
        option can slow down clinks considerably.

    -v | --verbose
        Enable verbose output.
EOM

    while [[ -n "$1" ]]; do
        case $1 in
        -d | --debug)
            DEBUG=true
            ;;
        -h | --help)
            echo "${help}"
            exit 0
            ;;
        -s | --safe)
            SAFE=true
            ;;
        -v | --verbose)
            VERBOSE=true
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done

    if [[ "${DEBUG}" = true && "${VERBOSE}" = true ]]; then
        PS4='$LINENO: '
        set -x
    fi

    if [[ -n "$1" ]]; then
        FLAG="$1"
        shift
    else
        FLAG=R
    fi
}

function stow_it() {
    src="$1"
    shift

    target="$1"
    shift

    dir="${src%/*}"
    subdir="${src##*/}"

    local stow_cmd="stow --dir=${dir} --target=${target} -${FLAG} ${subdir}"
    printf "%s: %s\n" "${SCRIPTNAME}" "${stow_cmd}"

    # shellcheck disable=SC2086
    # We use perl to filter out spurious warning output (see https://github.com/aspiers/stow/issues/65).
    sudo 2>&1 ${stow_cmd} | perl -nE 'print unless /BUG in find_stowed_path\?/'
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    main "$@"
fi
