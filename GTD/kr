#!/usr/bin/python3

"""Sets Event with khal using RELATIVE Time (x minutes from now)"""

import argparse
import datetime as dt
import subprocess as sp
import sys
from typing import *  # pylint: disable=wildcard-import,unused-wildcard-import

from loguru import logger as log

import gutils

data_dir = gutils.xdg.init('data')
minutes_fp = data_dir / 'minutes'


def parse_cli_args(argv: List[str]) -> argparse.Namespace:
    parser = gutils.ArgumentParser()

    default = 50
    parser.add_argument(
        'vargs',
        nargs='*',
        metavar=('arg'),
        default=default,
        help=(
            'Number of minutes, offset from now, the next break will be set'
            ' for OR name of the calendar event that will be created. Defaults'
            ' to {}.'.format(default)
        ),
    )

    parser.add_argument(
        '-e',
        '--end-break',
        action='store_true',
        help='Set khal event name to "END BREAK".',
    )
    parser.add_argument(
        '-r',
        '--review',
        dest='review',
        action='store_true',
        help=(
            'Create a "START REVIEW" event for 5 minutes prior to main event.'
        ),
    )

    return parser.parse_args(argv[1:])


@gutils.catch
def main(argv: List[str] = None) -> None:
    if argv is None:
        argv = sys.argv

    args = parse_cli_args(argv)

    gutils.logging.configure(__file__, debug=args.debug, verbose=args.verbose)

    try:
        vargs = list(args.vargs)
    except TypeError:
        vargs = []

    try:
        minutes = int(vargs[0])
        user_gave_minutes = True
    except (ValueError, IndexError):
        minutes = 52
        user_gave_minutes = False
    else:
        vargs.pop(0)

    start_break = 'START BREAK'
    end_break = 'END BREAK'

    if vargs:
        event_name = ' '.join(vargs)
    elif args.end_break:
        event_name = end_break

        if not user_gave_minutes:
            if minutes_fp.exists():
                with minutes_fp.open('r') as f:
                    minutes = int(int(f.read()) * 0.33)
            else:
                minutes = 17

        try:
            sp.check_call(['task', 'start.any:', 'stop'])
        except sp.CalledProcessError:
            pass
    else:
        event_name = start_break

    if not args.end_break:
        with minutes_fp.open('w') as f:
            f.write(str(minutes))

    log.trace('vargs: {}', repr(vargs))

    if event_name in [start_break, end_break]:
        sp.check_call(['kstop', '-n'])

    breaktime_dt = dt.datetime.now() + dt.timedelta(minutes=minutes)

    event_list = [event_name]
    dt_list = [breaktime_dt]

    if args.review:
        review_dt = dt.datetime.now() + dt.timedelta(minutes=(minutes - 5))
        dt_list.append(review_dt)
        event_list.append('START REVIEW')

    for D, event in zip(dt_list, event_list):
        cmd_list = ['khal', 'new', '-a', 'daily']
        cmd_list.append(D.strftime('%Y-%m-%dT%H:%M'))
        cmd_list.append(event)
        sp.check_call(cmd_list)

    sp.Popen(['calalrms'], stdout=sp.DEVNULL, stderr=sp.STDOUT)


if __name__ == "__main__":
    main()
