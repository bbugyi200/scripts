#!/usr/bin/env python3

"""
Generates a Prime (secondary) Tmuxinator Session Configuration File using
Jinja2
"""

import argparse
import os
import sys
from typing import List

import gutils
import jinja2
from loguru import logger as log  # pylint: disable=unused-import

scriptname = os.path.basename(os.path.realpath(__file__))


def parse_cli_args(argv: List[str]) -> argparse.Namespace:
    parser = gutils.ArgumentParser()
    parser.add_argument(
        'session_name', help='Tmuxinator session name to emulate.'
    )
    parser.add_argument(
        "socket_name",
        help="The name of the new tmuxinator socket (e.g. tmux_prime).",
    )
    return parser.parse_args(argv[1:])


@gutils.catch
def main(argv: List[str] = None) -> None:
    if argv is None:
        argv = sys.argv

    args = parse_cli_args(argv)
    gutils.logging.configure(__file__, debug=args.debug, verbose=args.verbose)

    fp_template = '{}/Sync/var/templates/template.tmuxinator'.format(
        os.environ['HOME']
    )
    dp_mux_config = '{}/.config/tmuxinator'.format(os.environ['HOME'])

    with open(fp_template, 'r') as f:
        contents = f.read()

    prime_session_name = '{}`'.format(args.session_name)
    fp_mux_config = '{}/{}.yml'.format(dp_mux_config, args.session_name)

    matched = False
    options_list = []
    for line in open(fp_mux_config, 'r'):
        if 'name:' in line:
            matched = True
            continue

        if matched:
            options_list.append(line)

    T = jinja2.Template(contents)
    new_contents = T.render(
        session_name=prime_session_name,
        socket_name=args.socket_name,
        options=''.join(options_list),
    )

    fp_prime_config = '{}/{}.yml'.format(dp_mux_config, prime_session_name)
    with open(fp_prime_config, 'w') as f:
        f.write(new_contents)


if __name__ == "__main__":
    main()
