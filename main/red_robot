#!/usr/bin/python3

"""
Reddit robot that posts automatically at a certain time of day (based on
cron job) using post specifications found from scanning directory.
"""

import datetime as dt  # noqa: F401
import os  # noqa: F401
import shutil
import subprocess as sp  # noqa: F401
import sys  # noqa: F401
import syslog
import time

import praw
import yaml

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/modules/python/gutils  #
############################################################################################

from loguru import logger as log
scriptname = os.path.basename(os.path.realpath(__file__))

error_flag = False

dp_pending = '{}/pending'.format(gutils.xdg.init('data'))
dp_completed = '{}/completed'.format(gutils.xdg.init('data'))

gutils.create_dir(dp_pending)
gutils.create_dir(dp_completed)

@gutils.catch
def main(args):
    global error_flag

    user_agent = 'User-Agent: linux:red_robot:v0.1.0 (by /u/bbugyi200)'

    reddit = praw.Reddit(client_id=envvar('client_id'),
                         client_secret=envvar('client_secret'),
                         username=envvar('username'),
                         password=envvar('password'),
                         user_agent=user_agent)

    s = 0
    exceptions_raised = []
    for D in scan(dp_pending, dp_completed):
        time.sleep(s)

        try:
            SR = reddit.subreddit(D['subreddit'])
            SR.submit(D['title'], url=D['url'], selftext=D['text'])
        except Exception as e:
            exceptions_raised.append(e)
            error_flag = True

            msg_fmt = "Failed to submit post to Reddit.{}: {}\n\n{}"
            msg = msg_fmt.format(D['subreddit'], D['fname'], str(e))
            gutils.notify(msg, '-t', '0')
            syslog.syslog(syslog.LOG_ERR, msg)
            continue

        msg = "Submitted post to '{}' subreddit: {}".format(D['subreddit'], D['fname'])
        gutils.notify(msg, '-t', '0')
        syslog.syslog(syslog.LOG_INFO, msg)

        s = 600

    if exceptions_raised:
        for e in exceptions_raised:
            raise Exception(exceptions_raised)

        sys.exit(1)


def envvar(name):
    return os.environ['REDDIT_{}'.format(name.upper())]


def scan(dp_new, dp_old):
    for fname in os.listdir(dp_new):
        if fname[0] == '.':
            continue

        fp_post = '{}/{}'.format(dp_new, fname)

        with open(fp_post, 'r') as f:
            Y = yaml.load(f)

        now = dt.datetime.now()
        multiple_dates = False
        if 'start_on' in Y:
            if isinstance(Y['start_on'], list):
                start_on = Y['start_on'][0]
                if len(Y['start_on']) > 1:
                    multiple_dates = True
                    del Y['start_on'][0]
            else:
                start_on = Y['start_on']

            if too_early(now, start_on):
                continue

        with open(fp_post, 'w') as f:
            yaml.dump(Y, f, default_flow_style=False)

        D = {}
        D.update(Y)

        for key in ['url', 'text']:
            if key not in D:
                D[key] = None

        D['fname'] = fname

        def complete_entry():
            global error_flag

            if not any([error_flag, multiple_dates]):
                shutil.move(fp_post, '{}/{}.{}'.format(dp_old,
                                                       fname,
                                                       now.strftime('%Y%m%d%H%m%S')))

                if os.path.exists(fp_post):
                    os.remove(fp_post)

            if error_flag:
                error_flag = False

        if 'title' in D and isinstance(D['title'], dict):
            for subreddit, title in D['title'].items():
                D['title'] = title
                D['subreddit'] = subreddit
                yield D

            complete_entry()
            continue

        for field in ['title', 'subreddit']:
            if field not in D:
                raise RuntimeError('Required field not defined: {}'.format(field))

        yield D
        complete_entry()


def too_early(now, date_string):
    earliest_post_date = dt.datetime.strptime(date_string, '%Y%m%d')
    if now < earliest_post_date:
        return True

    return False


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    args = parser.parse_args()

    gutils.logging.configure(__file__, debug=args.debug, verbose=args.verbose)
    main(args)
