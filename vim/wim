#!/bin/bash

read -r -d '' doc << EOM
If COMMAND is a script, finds script's location and opens it in vim.
Otherwise, assumes COMMAND is an alias or function definition and
searches dotfiles for it. Once found it opens that dotfile in vim and
jumps to the line number of the correpsonding alias/function definition.
EOM

# ---------- Modules ----------
source gutils.sh

# ---------- Command-line Arguments ----------
eval set -- "$(getopt -o "d,h,n,v" -l "debug,help,no-script,verbose" -- "$@")"

export USAGE_GRAMMAR=(
    "[-d] [-n] [-v] COMMAND [COMMAND [...]]"
    "-h"
)

# shellcheck disable=SC2154
read -r -d '' help << EOM
$(usage)

${doc}

Positional Arguments:
    COMMAND     The name of the script/alias/function to load.

Optional Arguments:
    -d | --debug
        Enable debug mode.

    -h | --help
        View this help message.

    -n | --no-script
        Force alias/function to be used in case alias/function AND script are
        defined with the same name.

    -v | --verbose
        Enable verbose output.
EOM

while [[ -n "$1" ]]; do
    case $1 in
       -d|--debug )
           debug=true
           ;;
       -h|--help )
           echo "${help}"
           exit 0
           ;;
       -n|--no-script )
           force_dotfile=true
           ;;
       -v|--verbose )
           verbose=true
           ;;
       -- )
           shift
           break
           ;;
    esac
    shift
done

if [[ "${debug}" = true && "${verbose}" = true ]]; then
    PS4='$LINENO: '
    set -x
fi

if [[ -z "$1" ]]; then
    die "$(usage)" 2
fi

# ---------- Main ----------
all_scripts=( )
for cmd in "$@"; do
	script_path="$(find "$HOME"/Dropbox/bin -type f -name "${cmd}" | head -n 1)"
	
	if [[ -z "${script_path}" ]] || [[ "${force_dotfile}" == true ]]; then
	    def_vim_args="$(ag -s "(^(alias|function)[ ]+|^)${cmd}( \(\)|\(\)| {|=)" "$HOME"/Dropbox/home/.config | awk -F: '{ print "+" $2 " " $1 }' | head -n 1)"

	    if [[ -n "${def_vim_args}" ]]; then
			# def_vim_args is now a string of the form "+<N> <path>"
			eval "vim ${def_vim_args}"
			continue
		elif [[ "${force_dotfile}" == true ]]; then
			die "No alias / function named '${cmd}' was found."
		elif command -v "${cmd}" &> /dev/null; then
			script_path="$(command -v "${cmd}")"
		else
			die "No script / alias / function named '${cmd}' was found."
	    fi
	fi

	all_scripts+=( "${script_path}" )
done

if [[ "${#all_scripts[@]}" -ne 0 ]]; then
	vim -c "silent! normal g;" "${all_scripts[@]}"
fi
