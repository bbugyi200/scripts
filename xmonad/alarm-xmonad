#!/bin/bash

# My Colors
GREEN="#0BF816"
YELLOW="#EBEE27"
RED="#FB0611"
BLUE="#3C4BF7"
WHITE="#FFFFFF"
GREY="#D9D9D9"


PID_FILE=/tmp/alarm.pid
TIMESTAMP_FILE=/home/bryan/.alarm.ts
FIFO=/tmp/alarm-fifo


time_left() {
	echo $(($stop_time - $(date --date="now" +%s)))
}


# ---------- Command Line Arguments ----------
eval set -- $(getopt -o "d,s,r" -l "debug,stop,resume" -- "$@")

while [[ -n "$1" ]]; do
	case $1 in
        '-d' | '--debug' )
            debug=true;;
		'-s' | '--stop' )
			action="stop";;
        '-r' | '--resume' )
            action="resume";;
		'--' )
			shift
			break;;
	esac
	shift
done

if [[ "$debug" = true ]]; then
    PS4='$LINENO: '
    set -x
fi

if [[ "$action" == "resume" && ! -f $TIMESTAMP_FILE ]]; then
    exit 1
fi


[[ -p $FIFO ]] || mkfifo $FIFO

# ---------- Automatically set 'action=stop' if PID_FILE Exists ----------
if [[ -f $PID_FILE && "$action" != "resume" ]]; then
    logger "$(basename $0): An alarm is already running! Stopping existing alarm!"
    action="stop"
else
	echo $$ > $PID_FILE
fi

trap 'rm $PID_FILE' EXIT
trap ':' SIGPIPE

# ---------- Action: stop ----------
if [[ "$action" == "stop" ]]; then
	cat $PID_FILE | xargs kill
    rm $TIMESTAMP_FILE
	printf "\n" > "$FIFO"
    if pgrep dunst; then
        sleep 0.5
        xdotool key ctrl+space  # Shortcut to close dunst notification
    fi
	exit 0
fi

# ---------- Set Alarm Time ----------
if [[ -f $TIMESTAMP_FILE ]]; then
    stop_time=$(cat $TIMESTAMP_FILE)
else
    if [[ -z "$1" ]]; then
        alrm_time="$(echo | dmenu -p "Alarm:")"
    else
        alrm_time=$1
    fi

    if [[ -z "$alrm_time" ]]; then
        exit 1
    fi


    if [[ $alrm_time == *"s" ]]; then
        stop_time=$(date --date="${alrm_time%s} seconds" +%s)
    elif [[ $alrm_time == *":"* ]]; then
        stop_time=$(date --date="$alrm_time" +%s)
        if [[ $(date +%s) -ge $stop_time ]]; then
            stop_time=$(date --date="$alrm_time tomorrow" +%s)
        fi
    else
        stop_time=$(date --date="$alrm_time minutes" +%s)
    fi

    echo $stop_time > $TIMESTAMP_FILE
fi


# ---------- Main Output ----------
iclock="<icon=clock.xbm/>"
while true; do
	TL=$(time_left)
	if [[ $TL -ge 3600 ]]; then
		printf "<fc=$GREY>  %d:%02d:%02d$iclock</fc>  |  \n" $((TL/3600)) $((TL%3600/60)) $((TL%3600%60))
	else
		printf "<fc=$GREY>  %d:%02d$iclock</fc>  |  \n" $((TL/60)) $((TL%60))
	fi
	sleep 1

	if [[ $TL -le 0 ]]; then
		break;
	fi
done > "$FIFO"


# ---------- Timer Finished ----------
notify-send -u critical -i /usr/share/icons/gnome/16x16/status/appointment-soon.png "$(basename $0)" "THE TIMER IS DONE!"
printf "<fc=$RED>  TIMER IS DONE!!! $iclock</fc>  |  \n" > "$FIFO"

sleep 60
printf "\n" > "$FIFO"
rm $TIMESTAMP_FILE
