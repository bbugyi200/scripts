#!/usr/bin/env python

""" Uses rofi to Prompt for a Shell Command to Run.

Intended to serve as a replacement for XMonad.Prompt.Shell.shellPrompt.

Any command starting with '!' will be run inside of a new urxvt instance. Any command starting
with '@' will also be piped to less.
"""

import subprocess as sp  # noqa: F401
import sys

import gutils

#######################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/pymodules/gutils  #
#######################################################################################

log = gutils.logging.getEasyLogger(__name__)


def shell_cmd(cmd):
    """ Returns Shell Command List """
    cmd_list = []
    urxvt_cmd_list = ['urxvt', '-name', 'big-floater', '-e']
    zsh_cmd_list = ['zsh', '-i', '-c']

    marker = cmd[0]
    if marker in ['!', '@']:
        log.debug('Using urxvt command list.')
        cmd = cmd[1:]
        cmd_list.extend(urxvt_cmd_list)
        if marker == '@':
            log.debug('Piping output of "{}" to less.'.format(cmd))
            cmd = '{}{}'.format(cmd, ' | less')
    else:
        log.debug('Will run "{}" in the background.'.format(cmd))

    cmd_list.extend(zsh_cmd_list)
    cmd_list.extend([cmd])
    log.debug('Shell Command List: {}'.format(cmd_list))

    return cmd_list


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug):
        ps = sp.Popen('prompt', stdout=sp.PIPE)
        cmd = ps.communicate()[0].decode().strip()

        if cmd == '':
            sys.exit(1)

        shell_cmd_list = shell_cmd(cmd)
        sp.Popen(shell_cmd_list, stdout=sp.DEVNULL, stderr=sp.STDOUT)
