#!/usr/bin/env python

"""View Eternal Shell History Log"""

import datetime as dt
import os
import re
import subprocess as sp  # noqa: F401

from dateutil.relativedelta import relativedelta
from dateutil.parser import parse

import gutils

#######################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/pymodules/gutils  #
#######################################################################################

log = gutils.logging.getEasyLogger(__name__)


def main(args):
    fp_final = '/tmp/{}.log'.format(os.path.basename(os.path.realpath(__file__)))
    logdir = '/home/bryan/Dropbox/var/logs/shell-history'

    build_custom_log(logdir, fp_final,
                     daterange=args.daterange,
                     username=args.username,
                     wdir=args.wdir,
                     hostname=args.hostname,
                     regexp=args.regexp)

    sp.check_call(['vim', '+', fp_final])


def build_custom_log(logdir, fp_final, *, daterange=None, username=None, wdir=None, hostname=None, regexp=None):
    """Construct the Contents of the Final Log File that the User Views"""
    dt_start, dt_end = get_daterange(args.daterange)
    hostname = os.uname().nodename if hostname is None else hostname
    regexp = '.*' if regexp is None else regexp

    with open(fp_final, 'w') as f:
        f.write('# vim: filetype=histlog\n\n')

    tmp_date = dt_start
    while tmp_date <= dt_end:
        fp_log = '{}/{}/{}/{:02}.log'.format(logdir, hostname, tmp_date.year, tmp_date.month)
        log_lines = process_logfile(fp_log,
                                    dt_end=dt_end,
                                    regexp=regexp,
                                    username=username,
                                    wdir=wdir)

        with open(fp_final, 'a+') as f:
            f.writelines(log_lines)

        tmp_date = tmp_date + relativedelta(months=1)


def process_logfile(fp, *, dt_end, regexp, username=None, wdir=None):
    """Process a single .log file.

    Returns:
        List of lines to append to final logfile that user will view.
    """
    matched_lines = []

    if not os.path.exists(fp):
        return []

    for line in open(fp, 'r'):
        try:
            hostname, user, date_string, wd, cmd = line.split(':', maxsplit=4)
        except ValueError as e:
            log.debug('line: %s', line.rstrip())
            log.debug("line.split(':'): %s", line.split(':'))
            raise e

        date = parse(date_string)

        conditions = [
            username is None or user == username,
            wdir is None or wd == wdir,
            date <= dt_end,
            re.match(regexp, cmd) is not None,
        ]

        if all(conditions):
            matched_lines.append(prettify(hostname, user, date, wd, cmd))

    return matched_lines


def prettify(hostname, user, date, wdir, cmd):
    """Transform Log Lines to Their Final Format"""
    pretty_line_fmt = '[{}] ({}@{}) {}\n\t{}\n'
    pretty_line = pretty_line_fmt.format(date.strftime('%Y-%m-%d %H:%M:%S'),
                                         user,
                                         hostname,
                                         wdir,
                                         cmd)

    return pretty_line


def get_daterange(daterange):
    """Get Daterange of Logs to View.

    Returns:
        tuple: (datetime, datetime)
    """
    if args.daterange is not None:
        dt_start = parse(daterange[0])
        dt_end = parse(daterange[1])
    else:
        dt_start = parse('20170101000000')
        dt_end = dt.datetime.now()

    return dt_start, dt_end


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('-D', '--daterange', nargs=2, metavar=('START', 'END'),
                        help='Filter logs by using a daterange.')
    parser.add_argument('-G', '--grep', dest='regexp', metavar='REGEXP',
                        help='Filter logs by command string using a regular expression.')
    parser.add_argument('-H', '--hostname', help="Filter logs by the machine's hostname.")
    parser.add_argument('-u', '--username', help='Filter logs by username.')
    parser.add_argument('-w', '--working-dir', dest='wdir', metavar='DIR',
                        help='Filter by what directory the user was in when the command was run.')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main(args)
