#!/usr/bin/env python

""" Archive Utility. Used to Archive and Compress Local Files and Directories. """

import argparse
from enum import Enum, auto
import os
import subprocess as sp


ARCH_DIR = 'archive'
TARGZ_FILE = '.archive.tar.gz'


class Action(Enum):
    """ Action Flags """
    ARCHIVE = auto()
    COMPRESS = auto()
    EXTRACT = auto()


def archive(auto_compress=False):
    """ Archive Files/Directories """
    if not os.path.isdir(ARCH_DIR):
        auto_compress = True
        if os.path.isfile(TARGZ_FILE):
            extract(verbose=False)
        else:
            os.makedirs(ARCH_DIR)

    for f in args.files:
        sp.call(['mv', f, ARCH_DIR])

    if auto_compress:
        compress(verbose=False)


def compress(verbose=True):
    """ Compress Archive Folder """
    flags = 'czvf' if verbose else 'czf'
    sp.check_call(['tar', flags, TARGZ_FILE, ARCH_DIR])
    sp.call(['rm', '-rf', ARCH_DIR])


def extract(verbose=True):
    """ Extract Archive Folder """
    flags = 'xzvf' if verbose else 'xzf'
    sp.check_call(['tar', flags, TARGZ_FILE])
    sp.call(['rm', '-f', TARGZ_FILE])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('files', nargs=argparse.REMAINDER, help='file(s) to archive')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-c', dest='action', action='store_const', const=Action.COMPRESS, help='compress archive directory')
    group.add_argument('-x', dest='action', action='store_const', const=Action.EXTRACT, help='extract archive directory')
    group.set_defaults(action=Action.ARCHIVE)
    args = parser.parse_args()

    {Action.ARCHIVE: archive,
     Action.COMPRESS: compress,
     Action.EXTRACT: extract}[args.action]()
