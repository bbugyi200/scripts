#!/bin/bash

##############################################
#  Wrapper for editor that logs filepaths.   #
##############################################

# Hack to make sure RECENTLY_EDITED_FILES_LOG is defined when using 'sudo'.
if [[ -z "${RECENTLY_EDITED_FILES_LOG}" ]]; then
    eval "$(grep "export RECENTLY_EDITED_FILES_LOG=" "$HOME"/.profile)"
fi


if [[ "${1}" == "-d" ]]; then
    shift
    PS4='$LINENO: '
    set -x
fi


scriptname="$(basename "$0")"
if [[ -f /usr/local/bin/"${scriptname}" ]]; then
    editor=/usr/local/bin/"${scriptname}"
else
    editor=/usr/bin/"${scriptname}"
fi

function set_pane_title() {
    if [[ -n "${TMUX}" ]]; then
        # shellcheck disable=SC1003
        printf '\033]2;%s\033\\' "$1"
    fi
}

# Set tmux pane title to 'vim'.
old_pane_title="$(tmux display-message -p '#{pane_title}')"
set_pane_title "vim"


# If file is owned by root, open using `sudo`.
if [[ -f "$1" ]] && [[ -z "$AT_WORK" ]]; then
    if [[ "$(stat --format '%U' "$1")" == "root" ]]; then
        # shellcheck disable=SC2086
        sudo -E ${editor} "$@"
    else
        ${editor} "$@"
    fi
else
    ${editor} "$@"
fi


# Log filepaths of all files that were edited.
for arg in "$@"; do
    # Don't log options, only files.
    if [[ -f "${arg}" ]]; then
        # Find absolute path to file.
        if [[ "${arg}" == "/"* ]]; then
            filepath="${arg}"
        else
            filepath="$PWD"/"${arg}"
        fi

        # Don't log files that match these patterns.
        for ignore_pttrn in "/tmp/" ".git/"; do
            if [[ "${filepath}" == *"${ignore_pttrn}"* ]]; then
                continue
            fi
        done

        # Remove duplicate entries.
        if [[ "$(uname -a)" == *"Darwin"* ]]; then
            sed -i '.bak' "/${filepath//\//\\/}/d" "${RECENTLY_EDITED_FILES_LOG}"
        else
            sed -i "/${filepath//\//\\/}/d" "${RECENTLY_EDITED_FILES_LOG}"
        fi
        echo "${filepath}" >> "${RECENTLY_EDITED_FILES_LOG}"
    fi
done

set_pane_title "${old_pane_title}"
