#!/usr/bin/env python3

"""Writes a weather report to some bar using a FIFO."""

import subprocess as sp  # noqa: F401
import re
import time

import gutils

from loguru import logger as log

@gutils.catch
def main():
    raw_output = run_weather_report(args.zipcode)

    loc = get_group('Current conditions at (.*)\n', raw_output)
    temp = get_temp(raw_output)
    sky = get_group(r'Sky conditions: ([A-z\s]+)$', raw_output)
    wind = get_wind(raw_output)

    report = format_report(loc, temp, sky, wind)
    print(report)


def run_weather_report(zipcode):
    """Runs the 'weather-report' command.

    Returns:
        Raw output of weather-report command.
    """
    cmd_list = ['weather-report']
    opts = ['--setpath', '/usr/share/weather-util', zipcode, '--no-cache']
    cmd_list.extend(opts)

    for i in range(6):
        child = sp.Popen(cmd_list, stdout=sp.PIPE, stderr=sp.DEVNULL)
        out = child.communicate()[0]
        rc = child.returncode

        if rc == 0:
            log.debug('weather-report Attempt #{}: SUCCESS'.format(i + 1))
            break
        else:
            log.debug('weather-report Attempt #{}: FAILURE'.format(i + 1))
            time.sleep(2**i)

    return out.decode().strip()


def get_temp(raw_output):
    """Returns temperature."""
    temp = get_group(r'Temperature: ([0-9]+\.[0-9]) F', raw_output)
    if temp is None:
        return "N/A"
    else:
        return f'{round(float(temp))} F'


def get_wind(raw_output):
    """Returns wind description."""
    wind = get_group(r'Wind: .*?([0-9\-]+ MPH)', raw_output)

    if wind is None:
        wind = get_group(r'Wind: (.*)', raw_output)

    return wind


def get_group(pttrn, string):
    """Returns the first group matched from a regex pattern."""
    match = re.search(pttrn, string, re.M)
    if match:
        return match.groups()[0]
    else:
        return None


def format_report(loc, temp, sky=None, wind=None):
    """Formats weather report."""
    report_fmt = '{}  |  TEMP: {}'
    report = report_fmt.format(loc, temp)

    if sky is not None:
        report = '{}  |  SKY: {}'.format(report, sky)

    if wind is not None:
        report = '{}  |  WIND: {}'.format(report, wind)

    return report


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('zipcode', nargs='?', default='08060', help='zip code of location')
    args = parser.parse_args()

    gutils.logging.configure(__file__, debug=args.debug, verbose=args.verbose)
    main()
