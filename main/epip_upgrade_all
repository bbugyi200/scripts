#!/bin/bash

# shellcheck disable=SC2206
# shellcheck disable=SC2207

SCRIPTNAME="$(basename "$0")"

###############################################################################
##### PYTHON PACKAGE NOTES ####################################################
###############################################################################
# loguru:
#   * my personal scripts use loguru
###############################################################################
### Install on Python 2.7 ONLY
EPIP_PY2_PACKAGES=(
    enum34
    IPython
    pathlib
    regex
    virtualenv
)
### Install on all Python 3.X versions
EPIP_PY3_PACKAGES=(
    /home/bryan/projects/pylibs
    bs4
    fastapi
    IPython
    loguru
    lxml
    more-itertools
    pandas
    parameterized
    pdbpp
    psutil
    pudb
    prometheus_client
    pymongo
    pysocks
    pytest
    python-dateutil
    pyyaml
    pyzmq
    redis
    regex
    requests
    schedule
    selenium
    tabulate
    tqdm
    typing-extensions
)
### Install on ONLY the primary Python 3.X version.
EPIP_PRIMARY_ONLY_PACKAGES=(
    pipx
    uvicorn
    virtualenvwrapper
)

function main() {
    if has_pyenv; then
        PRIMARY_VERSION="$(pyenv global)"
    else
        PRIMARY_VERSION="$(py_versions | sort -u | tail -n 1)"
    fi

    trap 'has_pyenv && pyenv global ${PRIMARY_VERSION}' INT TERM EXIT

    ONE_AT_A_TIME=0
    EPIP_PACKAGES=(${EPIP_PY2_PACKAGES[@]})
    for pyver in $(py2_versions); do
        install_packs "${pyver}"
    done

    ONE_AT_A_TIME=0
    for pyver in $(py3_versions); do
        EPIP_PACKAGES=(${EPIP_PY3_PACKAGES[@]})
        EPIP_PACKAGES+=($(primary_only_packs "${pyver}"))

        install_packs "${pyver}"
    done

    clean_all_packs
}

function primary_only_packs() {
    local pyver="$1"
    shift

    if [[ "${pyver}" == "${PRIMARY_VERSION}" ]]; then
        echo "${EPIP_PRIMARY_ONLY_PACKAGES[@]}"
    else
        pyver="$(_maybe_activate_pyenv "${pyver}")"
        python"${pyver}" -m pip uninstall -y "${EPIP_PRIMARY_ONLY_PACKAGES[@]}" &>/dev/null
    fi
}

function install_packs() {
    local pyver="$1"
    shift

    pyver="$(_maybe_activate_pyenv "${pyver}")"

    # Sort the EPIP_PACKAGES array.
    local epip_packages=( $(printf "%s\n" "${EPIP_PACKAGES[@]}" | sort) )

    _install_packs \
        "${pyver}" \
        "${epip_packages[@]}"
}

function _install_packs() {
    pyver="$1"
    shift

    packages=("$@")
    shift

    epip_install_args=()
    if [[ "${ONE_AT_A_TIME}" -eq 1 ]]; then
        epip_install_args+=(-1)
    fi
    epip_install_args+=(-V "${pyver}" "${packages[@]}")

    epip_install "${epip_install_args[@]}"

    printf "\n"
}

function clean_all_packs() {
    _pack_list_dir="${HOME}"/."$(basename "$0")"/"$(hostname)"
    py2_pack_list="${_pack_list_dir}"/py2_pack_list
    py3_pack_list="${_pack_list_dir}"/py3_pack_list
    primary_only_pack_list="${_pack_list_dir}"/primary_only_pack_list

    _ensure_pack_list_file "${py2_pack_list}" "${EPIP_PY2_PACKAGES[@]}"
    _ensure_pack_list_file "${py3_pack_list}" "${EPIP_PY3_PACKAGES[@]}"
    _ensure_pack_list_file "${primary_only_pack_list}" "${EPIP_PRIMARY_ONLY_PACKAGES[@]}"

    CLEAN_CURR_PACKS=(${EPIP_PY2_PACKAGES[@]})
    CLEAN_PACK_LIST_FILE="${py2_pack_list}"
    CLEAN_PYVERSIONS=($(py2_versions))
    _clean_packs

    CLEAN_CURR_PACKS=(${EPIP_PY3_PACKAGES[@]})
    CLEAN_PACK_LIST_FILE="${py3_pack_list}"
    CLEAN_PYVERSIONS=($(py3_versions))
    _clean_packs

    CLEAN_CURR_PACKS=(${EPIP_PRIMARY_ONLY_PACKAGES[@]})
    CLEAN_PACK_LIST_FILE="${primary_only_pack_list}"
    CLEAN_PYVERSIONS=(${PRIMARY_VERSION})
    _clean_packs
}

function _ensure_pack_list_file() {
    local pack_list_file="$1"
    shift

    pack_list_dir="$(dirname "${pack_list_file}")"
    [[ -d "${pack_list_dir}" ]] || mkdir -p "${pack_list_dir}"
    if ! [[ -f "${pack_list_file}" ]]; then
        echo "$@" >"${pack_list_file}"
    fi
}

function _clean_packs() {
    old_packs=($(cat "${CLEAN_PACK_LIST_FILE}"))

    local status=0
    for opack in "${old_packs[@]}"; do
        if [[ " ${CLEAN_CURR_PACKS[*]} " != *" ${opack} "* ]] && ! _pack_has_dependants "${opack}"; then
            if [[ "${CLEANING_STARTED}" != true ]]; then
                CLEANING_STARTED=true
                printf "===== %s =====\n" "Removing Old Packages"
            fi

            printf -- "----- Uninstalling %s\n" "${opack}"
            if confirm "# Do you really want to uninstall ${opack}?"; then
                for pyver in "${CLEAN_PYVERSIONS[@]}"; do
                    pyver="$(_maybe_activate_pyenv "${pyver}")"

                    printf -- "----- %s\n" "${pyver}"
                    if ! python"${pyver}" -m pip uninstall -y "${opack}"; then
                        status=1
                    fi
                done
            else
                status=1
            fi
        fi
    done

    if [[ "${status}" -eq 0 ]]; then
        echo "${CLEAN_CURR_PACKS[@]}" >"${CLEAN_PACK_LIST_FILE}"
    fi
}

function _pack_has_dependants() {
    local pack="$1"
    shift

    if  python -m pip show "${pack}" | grep -qE "Required-by: [A-Za-z].*"; then
        return 0
    else
        return 1
    fi
}

function py3_versions() {
    py_versions | grep -v "^2"
}

function py2_versions() {
    py_versions | grep -v "^3"
}

function py_versions() {
    if has_pyenv; then
        pyenv_versions
    else
        python_versions
    fi
}

function has_pyenv() {
    command -v pyenv &>/dev/null
}

function _maybe_activate_pyenv() {
    local pyver="$1"
    shift

    if has_pyenv; then
        pyenv global "${pyver}"
        echo "${pyver%.*}"
    else
        echo "${pyver}"
    fi
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    main "$@"
fi
