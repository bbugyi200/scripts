#!/usr/bin/env python3

"""
Provides list of movies / TV shows from filesystem for user to choose from and
then plays the user's choice using mpv.
"""

import argparse
import os
import pickle
import subprocess as sp
import sys
from typing import List

import bugyi
from bugyi import cli, xdg
from bugyi.core import catch, shell
from loguru import logger as log


scriptname = os.path.basename(os.path.realpath(__file__))
data_dir = xdg.init_full_dir('data')
cache_fp = f'{data_dir}/cache'


def parse_cli_args(argv: List[str]) -> argparse.Namespace:
    parser = cli.ArgumentParser()
    parser.add_argument('-C', dest='cache', action='store_true',
                        help='Generate cache for media files.')

    return parser.parse_args(argv[1:])


@catch
def main(argv: List[str] = None) -> None:
    if argv is None:
        argv = sys.argv

    args = parse_cli_args(argv)

    bugyi.logging.configure(__file__, debug=args.debug, verbose=args.verbose)

    if args.cache or not os.path.exists(cache_fp):
        find_output = shell(
            'sudo find /mnt/hercules/plex /home/bryan/Downloads '
                '-name "*.avi" -o '
                '-name "*.m4v" -o '
                '-name "*.mkv" -o '
                '-name "*.mov" -o '
                '-name "*.mp4" -o '
                '-name "*.mpg"'
        )

        options = {}
        for line in find_output.split('\n'):
            options[os.path.basename(line)] = line

        with open(cache_fp, 'wb') as f:
            pickle.dump(options, f)

        sys.exit(0)

    with open(cache_fp, 'rb') as f:
        options = pickle.load(f)

    all_media_files = '{}'.format(
        '\n'.join(sorted(filter(
            lambda x: str.isalpha(x[0]) or x[0] == '[',
            options.keys()
        )))
    ); log.trace(f"all_media_files = {all_media_files}")

    ps = sp.Popen(
        ['rofi', '-p', 'Document', '-m', '-4', '-dmenu', '-i'],
        stdout=sp.PIPE,
        stdin=sp.PIPE,
    )
    out, _ = ps.communicate(input=all_media_files.encode())
    choice = out.decode().strip()

    shell(f'umpv "{options[choice]}"')


if __name__ == "__main__":
    main()
