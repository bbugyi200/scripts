#!/usr/bin/env python

""" Refresh window contents of the GTD tmux session """

import subprocess as sp

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)


class Win:
    """ Tmux Window Numbers """
    MAIN = 0
    TIMEW = 1
    KHAL = 2
    CONFIG = 3
    LOGS = 5


def tmux_cmd(cmd, window, cmd_args=None, *, pane=0):
    """ Run Pre-formatted 'tmux <cmd>' Command """
    subprocess_command = ['tmux', '-L', 'GTD', cmd, '-t', 'GTD:{0}.{1}'.format(window, pane)]
    if cmd_args is not None:
        if isinstance(cmd_args, str):
            cmd_args = (cmd_args,)
        for arg in cmd_args:
            subprocess_command.append(arg)
    sp.call(subprocess_command)


def send_keys(window, keys, *, pane=0):
    """ Run Pre-formatted 'tmux send-keys' Command """
    tmux_cmd('send-keys', window, ('q', 'C-u', keys, 'Enter'), pane=pane)


def check_flags(*flags):
    """ Boolean Function that Checks if Any of the Given Flags are Enabled """
    desired_flags = list(flags)
    desired_flags.append('all')
    for flag in enabled_flags:
        if flag in desired_flags:
            return True

    return False


if __name__ == "__main__":
    flag_opts = ['all', 'config', 'rename', 'taskw', 'timew', 'khal', 'logs']
    flags_help = "These flags determine what information is refreshed. This option "\
        "accepts a comma-separated list containing one or more of the following "\
        "options: {{{}}}.".format(','.join(flag_opts))
    select_window_help = "Switch to WINDOW after all refreshes are complete."

    parser = gutils.ArgumentParser()
    parser.add_argument('-F', '--flags', dest='flags', default='taskw,timew,khal,logs', help=flags_help)
    parser.add_argument('-w', '--select-window', dest='window', help=select_window_help)
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug):
        enabled_flags = [flag.strip() for flag in args.flags.split(',')]

        if check_flags('rename'):
            out = sp.check_output(['task', 'context', 'show']).decode('utf-8')
            if out.startswith('No'):
                current_context = 'NONE'
            else:
                temp = out.split()[1]
                current_context = temp.strip("'").upper()

            tmux_cmd('rename-window', Win.MAIN, current_context)

        for window, flag in [(Win.CONFIG, 'config'), (Win.LOGS, 'logs')]:
            if check_flags(flag):
                send_keys(window, ':e')

        for window, cmd, flag, pane in [(Win.MAIN, 'tc', 'taskw', 1), (Win.TIMEW, 'twc', 'timew', 1), (Win.KHAL, 'kc', 'khal', 1)]:
            if check_flags(flag):
                send_keys(window, 'clear', pane=pane)

        if args.window is not None:
            tmux_cmd('select-window', args.window)
