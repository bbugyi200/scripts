#!/usr/bin/env python

""" Autotype a string of characters. """

import re
import subprocess as sp  # noqa: F401
import time

import gutils

log = gutils.logging.getEasyLogger(__name__)


def search(line, pttrn=r'\(\(([0-9]+)\)\)'):
    return re.search(pttrn, line)


def xtype(string, *, delay=None):
    if delay is None:
        delay = 150

    sp.check_call(['xdotool', 'type', '--delay', str(delay), string.strip('\n')])


def xkey(key):
    sp.check_call(['xdotool', 'key', key])


def read_line(line):
    while True:
        log.debug('Line at start of loop: {}'.format(line))
        start_match = search(line, r'^\(\(([0-9]+)\)\)')

        if start_match:
            log.debug('Start Match: {}'.format(start_match.group()))
            type_delay = start_match.groups()[0]
            if start_match:
                start = start_match.end()
            else:
                start = 0
        else:
            log.debug('No start match found.')
            start = 0
            type_delay = None

        line = line[start:]

        while True:
            flag = search(line, r'(<<[0-9\.]+>>|@|\[CLEAR\]|\[TAB\])')
            if flag:
                read_line(line[:flag.start()])
                group = flag.groups()[0]

                if group == '@':
                    xkey('Escape')
                elif group == '[CLEAR]':
                    xkey('ctrl+u')
                elif group == '[TAB]':
                    xkey('Tab')
                else:
                    time.sleep(float(flag.groups()[0].strip('<>')))

                line = line[flag.end():]
                continue
            break

        end_match = search(line)
        if not end_match:
            end_match = search(line, r'<<[0-9]+>>')

        log.debug('Line at middle of loop: {}'.format(line))
        if end_match:
            log.debug('End Match: {}'.format(end_match.group()))
            end = end_match.start()
        else:
            log.debug('No end match found.')
            end = len(line)

        xtype(line[:end], delay=type_delay)

        line = line[end:]
        log.debug('Line at end of loop: {}'.format(line))
        if not end_match:
            return


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('file', nargs='?', default='autotype.txt', help='The file to read from.')
    parser.add_argument('-E', '--enter-delay', nargs=1, dest='enter_delay', default=1,
            help='How many seconds to sleep after pressing Enter.')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug):
        time.sleep(0.5)
        firstline = True
        for line in open(args.file, 'r'):
            if line[0] == '#' or line[:2] == '//':
                continue
            if not firstline:
                enter_delay_match = search(line, r'^<<([0-9\.]+)>>')
                if enter_delay_match:
                    enter_delay = enter_delay_match.groups()[0]
                    line = line[enter_delay_match.end():]
                else:
                    enter_delay = args.enter_delay

                xkey('KP_Enter')
                time.sleep(float(enter_delay))

            firstline = False

            match = search(line)
            read_line(line)
