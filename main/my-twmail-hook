#!/usr/bin/python3

# twmail hook script that is called for every mail.
#
# The environment variables available to a hook are:
#
# TWMAIL_DATE
# TWMAIL_MESSAGE_ID
# TWMAIL_FROM
# TWMAIL_TO
# TWMAIL_SUBJECT
# TWMAIL_BODY

import datetime as dt
import os
import subprocess as sp
import sys

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

from loguru import logger as log


def main():
    # Log all TWMAIL environment variable values
    date = teelog('date')  # noqa: F841
    message_id = teelog('message_id')  # noqa: F841
    from_ = teelog('from')  # noqa: F841
    to = teelog('to')  # noqa: F841
    subject = teelog('subject')  # noqa: F841
    body = teelog('body')  # noqa: F841

    if from_ != 'bryanbugyi34@gmail.com':
        sys.exit(0)

    twargs, description = parse_body(body)
    notify(twargs, description)
    add_task(twargs, description)
    maybe_correct_date(twargs, date)


def teelog(short_env_var):
    """Logs TWMAIL environment variable and returns it so it can be assigned to a variable"""
    env_var_val = os.environ['TWMAIL_{}'.format(short_env_var.upper())]
    log.trace('%s: "%s"', short_env_var, env_var_val)
    return env_var_val


def parse_body(body):
    """Parses email body and returns the options for the 'task' command"""
    split_body = body.strip().split('--', maxsplit=1)
    if len(split_body) == 2:
        twargs, description = split_body
    else:
        twargs = '+inbox'
        description = split_body[0]

    BAD_CHAR_LIST = ['\\', "'", ' ', '\n']
    BAD_CHARS = ''.join(BAD_CHAR_LIST)

    # Format twargs
    twargs = twargs.strip(BAD_CHARS)
    twargs = twargs.replace('\\', '')
    twargs = twargs.lower()
    twargs = twargs.split()

    # Format description
    description = description.strip(BAD_CHARS)
    description = description.replace('\\', '')
    description = description[0].upper() + description[1:]

    return twargs, description


def notify(twargs, description):
    """Send Notifications

    Sends notification and writes log messages to document the final options list for the 'task'
    command.
    """
    msg_fmt = 'Adding "{}" to TW using the following fields: {}.'
    msg = msg_fmt.format(description, ' '.join(twargs))
    log.info(msg)
    gutils.notify(msg)


def add_task(twargs, description):
    """Uses 'task' command to add task"""
    cmd_list = ['task', 'add']
    cmd_list.extend(twargs)
    cmd_list.extend([description])
    sp.call(cmd_list)


def maybe_correct_date(twargs, date):
    """If +inbox item was added over 24 hours ago, remove the 1-day wait period"""
    if '+inbox' not in twargs:
        return 1

    START_OF_DAY = 6

    try:
        utc_email_datetime = _get_utc_dt(date, r'%Y-%m-%dT%H:%M:%S\+00:00')
    except ValueError:
        try:
            utc_email_datetime = _get_utc_dt(date, r'%Y-%m-%dT%H:%M:%S-04:00')
        except ValueError:
            utc_email_datetime = _get_utc_dt(date, r'%Y-%m-%dT%H:%M:%S-05:00')

    email_datetime = utc_email_datetime.astimezone(tz=None)
    email_date = email_datetime.date()

    today_datetime = dt.datetime.now() - dt.timedelta(hours=START_OF_DAY)
    today_date = today_datetime.date()

    if email_date < today_date:
        log.info('Task was not added to Inbox recently. Removing wait.')

        out = sp.check_output('task +LATEST uuids', shell=True)
        uuid = out.decode()

        sp.call(['task', uuid, 'modify', 'due:due-1d', 'wait:due'])


def _get_utc_dt(date, dt_fmt):
    """Returns a formatted date string"""
    return dt.datetime.strptime(date, dt_fmt).replace(tzinfo=dt.timezone.utc)


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    args = parser.parse_args()

    gutils.logging.configure(__name__, debug=args.debug, verbose=args.verbose)
    main()
