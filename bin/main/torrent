#!/usr/bin/env python3

"""
Connects to a VPN, torrents a movie, disconnects from the VPN
when the download is finished, and then texts me.
"""

import argparse
import logging
import os
import time
import subprocess as sp
import sys

import easylog

log = easylog.getEasyLogger(__name__)

SECONDS_IN_HOUR = 3600
delay_help = "Delay starting the script for DELAY seconds. Defaults to 5."
timeout_help = "Time (in hours) to attempt to complete download before timing out. Defaults to 1."

DEVNULL = open(os.devnull, 'w')
# DEVNULL = None


def textme(msg):
    """ Sends SMS Message to my Cell Phone """
    log.info('SMS Message Sent: {}'.format(msg))
    sp.call(['textme', msg], stdout=DEVNULL)


def main():
    time.sleep(args.delay)

    try:
        log.info('Connecting to VPN and starting transmission daemon...')
        sp.check_call(['PIA', 'start', 'nyc'], stdout=DEVNULL)
        sp.check_call(['transmission-daemon'], stdout=DEVNULL)
    except sp.CalledProcessError as e:
        raise RuntimeError('Failed to start the VPN and/or the transmission daemon! :(')
    else:
        i = 0
        while True:
            time.sleep(1)
            try:
                sp.check_call(['transmission-remote', '-a', args.magnet], stdout=DEVNULL)
            except sp.CalledProcessError as e:
                i += 1
                if i <= 10:
                    continue
                else:
                    raise RuntimeError('Failed to start torrent! :(')
            else:
                break

        i = 0
        while True:
            SLEEP_TIME = 5

            i += 1
            if i > (args.timeout * SECONDS_IN_HOUR / SLEEP_TIME):
                msg = "Torrent is still attempting to download after {0:.1f} hour(s) elapsed time.\
                       Shutting down early! :(".format(args.timeout)
                raise RuntimeError(msg)

            time.sleep(SLEEP_TIME)

            p = sp.Popen(['transmission-remote', '-l'], stdout=sp.PIPE)
            output = p.communicate()[0].decode('utf-8')
            if 'finished' in output.lower():
                break

        textme('Your movie has finished downloading! :)')

    finally:
        sp.call(['transmission-remote', '-t1', '-r'], stdout=DEVNULL)
        sp.call(['killall', '-9', 'transmission-daemon'], stdout=DEVNULL)
        sp.call(['PIA', 'stop'], stdout=DEVNULL)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('magnet', help='The torrent magnet file.')
    parser.add_argument('-d', '--debug', action='store_true', help='enable debugging mode')
    parser.add_argument('-D', type=int, dest='delay', default=5, help=delay_help)
    parser.add_argument('-T', type=float, dest='timeout', default=1, help=timeout_help)
    args = parser.parse_args()

    if args.debug:
        for handler in log.handlers:
            handler.setLevel(logging.DEBUG)

    try:
        main()
    except RuntimeError as e:
        log.error(str(e))
        textme(str(e))
        sys.exit(1)
    except Exception as e:
        log.error('{}: {}'.format(type(e).__name__, str(e)))
        raise
