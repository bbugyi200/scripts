#!/bin/bash

###################################################################################################
#  Checks if Any Maintenance is Due                                                               #
#                                                                                                 #
# Checks both the local machine and remote machines. Remote machines can go twice as long without #
# maintenance before this script complains.                                                       # 
###################################################################################################

source gutils.sh

# ---------- Global Variables ----------
export USAGE_GRAMMAR=(
    "[-d] MAX_DAYS"
    "-h"
)

read -r -d '' HELP << EOM
$(usage)
EOM

# ---------- Command-line Arguments ----------
eval set -- "$(getopt -o "d,h" -l "debug,help" -- "$@")"

while [[ -n "$1" ]]; do
    case $1 in
       -d|--debug )
           PS4='$LINENO: '
           set -x
           ;;
       -h|--help )
           echo "$HELP"
           exit 0
           ;;
       -- )
           shift
           break
           ;;
    esac
    shift
done

if [[ -z "$1" ]]; then
    die "$(usage)" 2
fi

max_update_days="$1"; shift

# shellcheck disable=SC2034
secret_wrapper="emanage"
source secret.sh

# ---------- Functions ----------
function warn_user() {
    action="$1"; shift
    actual_days="$1"; shift
    max_days="$1"; shift
    machine_name="$1"; shift

    if [[ -z "${machine_name}" ]]; then
        machine_name="this machine"
    fi

    notify-send -u critical -t 0 "Maintenance Overdue!" "You should ${action} ${machine_name}.\n\nIt has been ${actual_days} (>=${max_days}) days since the 'emanage --${action}' command was last run."
}

function get_max_days() {
    action="$1"; shift
    multiplier="$1"; shift

    if [[ -z "${multiplier}" ]]; then
        multiplier=1
    fi

    case "${action}" in
        "update" )
            max="${max_update_days}"
            ;;
        "cleanup" )
            max="$((3 * max_update_days))"
            ;;
    esac

    max="$((max * multiplier))"
    printf "${max}"
}

# ---------- Main ----------
# >>> LOCAL
for action in "update" "cleanup"; do
    days=$(emanage --days-since-last local --"${action}")
    max_days="$(get_max_days "${action}")"
    if [[ ${days} -ge "${max_days}" ]]; then
        warn_user "${action}" "${days}" "${max_days}"
    fi
done

# >>> REMOTE
for action in "update" "cleanup"; do
    spec=$(emanage --days-since-last remote --"${action}")
    machine_name="${spec%:*}"
    days="${spec#*:}"

    max_days="$(get_max_days "${action}" 3)"
    if [[ ${days} -ge "${max_days}" ]]; then
        warn_user "${action}" "${days}" "${max_days}" "${machine_name}"
    else
        break
    fi
done
