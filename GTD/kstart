#!/usr/bin/python3

"""
Setup workday schedule in Khal using pomodoro intervals. The workday starts at the moment this
script is called.
"""

import datetime as dt
import subprocess as sp  # noqa: F401

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)
default_start = 'START BREAK'
default_stop = 'END BREAK'


def main(args, work_duration, break_duration):
    now_dt = dt.datetime.now()

    Events = []
    if args.first_start_time:
        from dateutil.parser import parse
        first_start_dt = parse(args.first_start_time)
    else:
        first_start_dt = now_dt + dt.timedelta(minutes=work_duration)

    stop_dt = first_start_dt + dt.timedelta(minutes=break_duration)

    Events.append((first_start_dt, default_start))
    Events.append((stop_dt, default_stop))

    break_dt = stop_dt + dt.timedelta(minutes=work_duration)
    for _ in range(args.sessions - 2):
        Events.append((break_dt, default_start))

        stop_dt = break_dt + dt.timedelta(minutes=break_duration)
        break_dt = stop_dt + dt.timedelta(minutes=work_duration)

        Events.append((stop_dt, default_stop))

    eos_dt = break_dt
    Events.append((eos_dt, 'EOS'))

    for event_dt, event_name in Events:
        set_khal_event(event_dt, event_name)

    sp.Popen(['calalrms'], stdout=sp.DEVNULL, stderr=sp.STDOUT)

    # Print EOS Time
    fmt = 'Projected EOS Time: {}'
    print(fmt.format(eos_dt.strftime('%H:%M')))

    # Print size (in hours) of workday.
    fsdelta = first_start_dt - now_dt
    total_minutes = ((args.sessions - 1) * (work_duration + break_duration) +
                     (fsdelta.seconds // 60))
    fmt = 'Projected Workday Duration: {} hours and {} minutes'
    print(fmt.format(total_minutes // 60, total_minutes % 60))


def set_khal_event(event_dt, event_name):
    # Delete all other Khal events with that same event name.
    if not hasattr(set_khal_event, 'event_names'):
        set_khal_event.event_names = set()

    if event_name not in set_khal_event.event_names:
        sp.check_call(['kdel', event_name])

    set_khal_event.event_names.add(event_name)

    cmd_list = ['khal', 'new', '-a', 'daily']
    cmd_list.append(event_dt.strftime('%Y-%m-%dT%H:%M'))
    cmd_list.append(event_name)
    sp.check_call(cmd_list)


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('-n', '--num-of-sessions', dest='sessions', type=int, default=7,
                        metavar='N',
                        help='Number of work sessions. Defaults to 7.')
    parser.add_argument('-I', '--interval', default="50/15", metavar="INTERVAL",
                        help='Pomodoro interval to use for each work session. Argument should be '
                             'of the form "W/B" where both "W" and "B" represent minutes and '
                             'should both be integer values. Defaults to 50/15.')
    parser.add_argument('-T', '--first-break-time', dest='first_start_time', metavar='HH:MM',
                        help='Explicitly set first break time.')
    args = parser.parse_args()

    try:
        interval = args.interval.split('/')
        work_duration = int(interval[0])
        break_duration = int(interval[1])
    except (ValueError, IndexError):
        parser.error('The argument provided to the --interval option MUST be of the form "W/B", '
                     'where "W" and "B" are integer values (e.g. 50/15).')

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main(args, work_duration, break_duration)
