#!/usr/bin/env python

"""Ebuild Version Check for Portage Overlay.

Uses app-portage/euscan to verify that ebuilds in the specified portage overlay are up to date.
"""

import os
import subprocess as sp  # noqa: F401
import re
import threading
import queue

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/modules/python/gutils  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)


class PkgContainer:
    """Thread-Safe Set-Like Container for Portage Packages."""
    def __init__(self):
        self.lock = threading.Lock()
        self.packages = set()
        self.current_id = 0

    def add(self, pkg):
        with self.lock:
            if pkg in self.packages:
                raise ValueError
            else:
                self.packages.add(pkg)
                self.current_id += 1
                return self.current_id

    def remove(self, pkg):
        with self.lock:
            try:
                self.packages.remove(pkg)
            except KeyError as e:
                pass


class MessageManager:
    """Prints package statuses to STDOUT in a thread-safe manner.

    Used to make sure that ebuild status messages are reported in alphabetical order
    instead of at random. Also prevents race condition. E.g. status messages from
    two different packages could try to print to STDOUT at the same exact time,
    resulting in mangled text.
    """
    def __init__(self):
        self.lock = threading.Lock()
        self.last_id = 0
        self.pending = {}

    def print(self, msg, id_number):
        with self.lock:
            if id_number == self.last_id + 1:
                    self.last_id += 1
                    self.release(msg)
                    self.check_pending()
            else:
                log.debug('Freezing package ID: %s', id_number)
                self.pending[id_number] = msg

    def check_pending(self):
        next_id = self.last_id + 1
        if next_id in self.pending:
            msg = self.pending[next_id]
            self.pending.pop(next_id)

            self.last_id += 1
            self.release(msg)

            self.check_pending()

    def release(self, msg):
        if msg != '':
            print(msg)
            status = 'checked'
        else:
            status = 'skipped'

        log.debug('Releasing package ID: %d (%s)', self.last_id, status)

    def noop(self, id_number):
        with self.lock:
            if id_number == self.last_id + 1:
                self.last_id += 1
            else:
                self.pending[id_number] = ''


pkg_container = PkgContainer()
message_manager = MessageManager()
pkg_queue = queue.Queue()
threads = []


def main(args):
    if args.nocolor:
        for attr in dir(gutils.colorize):
            if not attr.startswith('_'):
                setattr(gutils.colorize, attr, lambda x: x)

    all_files = get_all_files(args.overlay_dir)
    all_ebuild_paths = [f for f in all_files if f.endswith('.ebuild')]

    # ebuilds in this list are of the form 'CATEGORY/PACKAGE-VERSION.ebuild'
    all_ebuilds = ['/'.join([ebuild_path_list[-3], ebuild_path_list[-1]])
                   for ebuild_path_list in [ebpath.split('/') for ebpath in all_ebuild_paths]]
    log.vdebug('all_ebuilds: %s', all_ebuilds)

    msg_fmt = 'Ebuild Version Check will be run for the following overlay: {}\n'
    if args.verbose:
        print(msg_fmt.format(os.path.basename(args.overlay_dir)))

    pkg_queue.maxsize = args.max_thread_count
    for ebuild in sorted(all_ebuilds):
        t = threading.Thread(target=check_ebuild, args=(ebuild, args.live, args.offline), daemon=True)
        t.start()
        threads.append(t)

    pkg_queue.join()
    if args.verbose:
        print('\nFinished. {} packages checked.'.format(len(pkg_container.packages)))


def check_ebuild(ebuild, show_live_pkgs=False, show_offline_pkgs=False):
    try:
        msg_fmt = '{}:: {}'
        pkg = re.sub('-([0-9])+\..*ebuild$', '', ebuild)
        log.vdebug('pkg: %s', pkg)
        pkg_queue.put(pkg)

        try:
            id_number = pkg_container.add(pkg)
        except ValueError as e:
            return

        cmd_fmt = "eix --nocolor --format '<installedversions:NAMEVERSION>' {} | head -n 1"
        ps = sp.check_output(cmd_fmt.format(pkg), shell=True)
        out = ps.decode().strip()

        if not re.match('[A-z\-\d]+/[A-z\-\d]+-[\d\.]+(-r\d*)?$', out):
            if show_offline_pkgs == 'y':
                message_manager.print(msg_fmt.format(pkg, gutils.colorize.yellow('NOT INSTALLED')), id_number)
            else:
                pkg_container.remove(pkg)
                message_manager.noop(id_number)
            return

        version = out.split('-')[-1]
        if version == '9999':
            if show_live_pkgs == 'y':
                message_manager.print(msg_fmt.format(pkg, gutils.colorize.blue('LIVE BUILD')), id_number)
            else:
                pkg_container.remove(pkg)
                message_manager.noop(id_number)
            return

        try:
            ps = sp.check_output(['euscan', pkg])
        except sp.CalledProcessError:
            log.vdebug('Package: %s', pkg)
            raise

        out = ps.decode().strip()
        log.vdebug('Euscan Output: %s', out)

        out_list = out.split('\n')
        fail_marker = 'Upstream Version: '
        pass_marker = "Didn't find any new version"
        for line in out_list:
            if fail_marker in line:
                fail_msg_fmt = msg_fmt.format(pkg, gutils.colorize.red('FAILED  (New Version: {})'))
                match = re.search('([\d\.]+)', line)
                message_manager.print(fail_msg_fmt.format(match.group()), id_number)
                break
            if pass_marker in line:
                message_manager.print(msg_fmt.format(pkg, gutils.colorize.green('PASSED')), id_number)
                break
        else:
            message_manager.print(msg_fmt.format(pkg, gutils.colorize.yellow('UNKNOWN')), id_number)
    finally:
        pkg_queue.get()
        pkg_queue.task_done()


def get_all_files(directory):
    F = []
    for root, dirs, files in os.walk(directory):
        for name in files:
            F.append(os.path.join(root, name))
    return F


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('-D', dest='overlay_dir', default='/var/lib/layman/bbugyi200',
                        help='Location (directory path) of the portage overlay.')
    parser.add_argument('-T', '--max-thread-count', type=int, default=8,
                        help='Max number of threads to start. Defaults to 8.')
    parser.add_argument('--nocolor', action='store_true', help='Disable colored output.')
    parser.add_argument('--live-builds', dest='live', action='store', choices=('y', 'n'),
                        default='n',
                        help='Print status for live ebuilds (ebuilds with version 9999).')
    parser.add_argument('--offline', choices=('y', 'n'), default='n',
                        help='Print status for packages that are not installed on this machine.')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main(args)
