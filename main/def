#!/usr/bin/python3

"""Add a New Alias to your bashrc / zshrc in Alphabetical Order"""

import datetime as dt  # noqa: F401
import os  # noqa: F401
import re
import subprocess as sp  # noqa: F401
import sys  # noqa: F401

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/modules/python/gutils  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)
scriptname = os.path.basename(os.path.realpath(__file__))


def main(args):
    marker = '# {} marker: {}'.format(scriptname, str.upper(args.marker))
    found_marker = False
    new_alias_definition = "alias {}=''\n".format(args.name)

    for filename in args.file_list:
        line_number = 0
        new_lines = []

        found_line = False
        for line in open(filename, 'r'):
            new_lines.append(line)

            if not found_line:
                line_number += 1

            if not found_marker:
                if line.strip() == marker:
                    found_marker = True

                continue

            if line[0] == '#':
                continue

            tmp_line = line.replace('alias ', '')
            line_name = re.split(r'[=(]', tmp_line)[0]
            log.vdebug('line_name => %s', repr(line_name))

            if args.name == line_name.strip():
                gutils.io.emsg('{} is already defined.'.format(args.name))
                sp.check_call(['wim', args.name])
                sys.exit(0)

            tmp_line = tmp_line.lower()
            log.vdebug('tmp_line => %s', repr(tmp_line))

            if (args.name.lower() < tmp_line or not line.strip()) and not found_line:
                new_lines.pop()
                new_lines.append(new_alias_definition)
                new_lines.append(line)
                found_line = True

        if found_marker:
            if not found_line:
                new_lines.append(new_alias_definition)
                line_number += 1
            break
    else:
        raise RuntimeError('Lexical position for new alias could not be found.')

    with open(filename, 'w') as f:
            f.writelines(new_lines)

    column_number = 9 + len(args.name)
    cursor_call = 'call cursor({}, {})'.format(line_number, column_number)
    cmd_list = ['vim', '+startinsert', '-c', cursor_call, filename]
    log.vdebug('cmd_list => %s', repr(cmd_list))

    sp.check_call(cmd_list)


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('name', metavar='alias_name', help='Name of the new alias.')
    parser.add_argument('-m', '--marker', default='DEFAULT', help='Marks the start line.')
    parser.add_argument('file_list', nargs='+', metavar='file', help='File to search when determining where to add new alias definition.')
    args = parser.parse_args()


    if args.name[0] == '/':
        parser.error("Must specify a name for the new alias.")


    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main(args)
