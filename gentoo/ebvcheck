#!/usr/bin/env python3

"""Ebuild Version Check for Portage Overlay.

Uses app-portage/euscan to verify that ebuilds in the specified portage overlay
are up to date.
"""

import argparse
import os
import queue
import re
import subprocess as sp  # noqa: F401
import sys
import threading
from typing import Any, Dict, List, Set

import gutils
from loguru import logger as log


class PkgContainer:
    """Thread-Safe Set-Like Container for Portage Packages."""

    def __init__(self) -> None:
        self.lock = threading.Lock()
        self.packages: Set[str] = set()
        self.current_id = 0

    def add(self, pkg: str) -> int:
        with self.lock:
            if pkg in self.packages:
                raise ValueError

            self.packages.add(pkg)
            self.current_id += 1
            return self.current_id

    def remove(self, pkg: str) -> None:
        with self.lock:
            try:
                self.packages.remove(pkg)
            except KeyError:
                pass


class MessageManager:
    """Prints package statuses to STDOUT in a thread-safe manner.

    Used to make sure that ebuild status messages are reported in alphabetical
    order instead of at random. Also prevents race condition. E.g. status
    messages from two different packages could try to print to STDOUT at the
    same exact time, resulting in mangled text.
    """

    def __init__(self) -> None:
        self.lock = threading.Lock()
        self.last_id = 0
        self.pending: Dict[int, str] = {}

    def print(self, msg: str, id_number: int) -> None:
        with self.lock:
            if id_number == self.last_id + 1:
                self.last_id += 1
                self.release(msg)
                self.check_pending()
            else:
                log.debug(
                    'Freezing package ID: #{} (last_id == #{})',
                    id_number,
                    self.last_id,
                )
                self.pending[id_number] = msg

    def check_pending(self) -> None:
        next_id = self.last_id + 1
        if next_id in self.pending:
            msg = self.pending[next_id]
            self.pending.pop(next_id)

            self.last_id += 1
            self.release(msg)

            self.check_pending()

    def release(self, msg: str) -> None:
        if msg != '':
            print(msg)
            status = 'checked'
        else:
            status = 'skipped'

        log.debug('Releasing package ID: {} ({})', self.last_id, status)

    def noop(self, id_number: int) -> None:
        with self.lock:
            self.pending[id_number] = ''
            self.check_pending()


pkg_container = PkgContainer()
message_manager = MessageManager()
pkg_queue: 'queue.Queue[str]' = queue.Queue()
threads: List[threading.Thread] = []


@gutils.catch  # noqa: C901
def main(argv: List[str] = None) -> None:
    if argv is None:
        argv = sys.argv

    args = parse_cli_args(argv)

    gutils.logging.configure(__file__, debug=args.debug, verbose=args.verbose)
    if args.color == 'n':
        for attr in dir(gutils.colorize):
            if not attr.startswith('_'):
                setattr(gutils.colorize, attr, lambda x: x)

    all_files = get_all_files(args.overlay_dir)
    all_ebuild_paths = [f for f in all_files if f.endswith('.ebuild')]

    # ebuilds in this list are of the form 'CATEGORY/PACKAGE-VERSION.ebuild'
    all_ebuilds = [
        '/'.join([ebuild_path_list[-3], ebuild_path_list[-1]])
        for ebuild_path_list in [
            ebpath.split('/') for ebpath in all_ebuild_paths
        ]
    ]
    log.trace('all_ebuilds: {}', all_ebuilds)

    msg_fmt = (
        'Ebuild Version Check will be run for the following overlay: {}\n'
    )
    if args.verbose:
        print(msg_fmt.format(os.path.basename(args.overlay_dir)))

    pkg_queue.maxsize = args.max_thread_count
    for ebuild in sorted(all_ebuilds):
        pkg = re.sub(r'-([0-9])+\..*ebuild$', '', ebuild)

        try:
            id_number = pkg_container.add(pkg)
        except ValueError:
            continue

        log.debug('ID: {}', id_number)

        if args.max_thread_count > 1:
            t = threading.Thread(
                target=check_pkg,
                args=(pkg, id_number, args.live, args.offline),
                daemon=True,
            )
            t.start()
            threads.append(t)
        else:
            check_pkg(pkg, id_number, args.live, args.offline)

    if args.max_thread_count > 1:
        pkg_queue.join()

    if args.verbose:
        print(
            '\nFinished. {} packages checked.'.format(
                len(pkg_container.packages)
            )
        )


def parse_cli_args(argv: List[str]) -> argparse.Namespace:
    parser = gutils.ArgumentParser()

    default: Any = '/var/lib/layman/bbugyi200'
    parser.add_argument(
        '-D',
        dest='overlay_dir',
        default=default,
        help=(
            'Location (directory path) of the portage overlay. Defaults to {}.'
            .format(default)
        ),
    )

    default = 8
    parser.add_argument(
        '-T',
        '--max-thread-count',
        type=int,
        default=default,
        help='Max number of threads to start. Defaults to {}.'.format(default),
    )

    default = 'y'
    parser.add_argument(
        '--color',
        choices=('y', 'n'),
        default=default,
        help='Colorize output? Defaults to \'{}\'.'.format(default),
    )

    default = 'n'
    parser.add_argument(
        '--live-builds',
        dest='live',
        action='store',
        choices=('y', 'n'),
        default=default,
        help=(
            'Print status for live ebuilds (ebuilds with version 9999).'
            ' Defaults to \'{}\'.'.format(default)
        ),
    )

    default = 'n'
    parser.add_argument(
        '--offline',
        choices=('y', 'n'),
        default=default,
        help=(
            'Print status for packages that are not installed on this machine.'
            ' Defaults to \'{}\'.'.format(default)
        ),
    )

    return parser.parse_args(argv[1:])


def check_pkg(  # noqa: C901
    pkg: str,
    id_number: int,
    show_live_pkgs: bool = False,
    show_offline_pkgs: bool = False,
) -> None:
    log.trace('pkg: {}', pkg)
    pkg_queue.put(pkg)

    try:
        cmd_fmt = (
            "eix --nocolor --format '<installedversions:NAMEVERSION>' {} |"
            " head -n 1"
        )
        ps = sp.check_output(cmd_fmt.format(pkg), shell=True)
        out = ps.decode().strip()

        msg_fmt = '{}:: {}'
        if not re.match(
            r'[A-z\-\d]+/[A-z\-\d]+-[\d\.]+(_[A-z_]+\d*)?(-r\d*)?$', out
        ):
            if show_offline_pkgs == 'y':
                message_manager.print(
                    msg_fmt.format(
                        pkg, gutils.colorize.yellow('NOT INSTALLED')
                    ),
                    id_number,
                )
            else:
                pkg_container.remove(pkg)
                message_manager.noop(id_number)
            return

        version = out.split('-')[-1]
        if version == '9999':
            if show_live_pkgs == 'y':
                message_manager.print(
                    msg_fmt.format(pkg, gutils.colorize.blue('LIVE BUILD')),
                    id_number,
                )
            else:
                pkg_container.remove(pkg)
                message_manager.noop(id_number)
            return

        try:
            ps = sp.check_output(['euscan', pkg])
        except sp.CalledProcessError:
            log.trace('Package: {}', pkg)
            raise

        out = ps.decode().strip()
        log.trace('Euscan Output: {}', out)

        out_list = out.split('\n')
        fail_marker = 'Upstream Version: '
        pass_marker = "Didn't find any new version"
        for line in out_list:
            if fail_marker in line:
                log.debug('{} FAILED (#{}).'.format(pkg, id_number))
                fail_msg_fmt = msg_fmt.format(
                    pkg, gutils.colorize.red('FAILED  (New Version: {})')
                )
                match = re.search(r'([\d\.]+)', line)

                if match is None:
                    raise RuntimeError(
                        "Unable to parse version number from euscan output."
                    )

                message_manager.print(
                    fail_msg_fmt.format(match.group()), id_number
                )
                break
            if pass_marker in line:
                log.debug('{} PASSED (#{}).'.format(pkg, id_number))
                message_manager.print(
                    msg_fmt.format(pkg, gutils.colorize.green('PASSED')),
                    id_number,
                )
                break
        else:
            log.debug('{} UNKNOWN (#{}).'.format(pkg, id_number))
            message_manager.print(
                msg_fmt.format(pkg, gutils.colorize.yellow('UNKNOWN')),
                id_number,
            )
    finally:
        pkg_queue.get()
        pkg_queue.task_done()


def get_all_files(directory: str) -> List[str]:
    F = []
    for root, _dirs, files in os.walk(directory):
        for name in files:
            F.append(os.path.join(root, name))
    return F


if __name__ == "__main__":
    main()
