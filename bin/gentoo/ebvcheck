#!/usr/bin/env python

"""Ebuild Version Check for Portage Overlay.

Uses app-portage/euscan to verify that ebuilds in the specified portage overlay are up to date.
"""

import os
import subprocess as sp  # noqa: F401
import re

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/modules/python/gutils  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)


def main(args):
    if args.nocolor:
        for attr in dir(gutils.colorize):
            if not attr.startswith('_'):
                setattr(gutils.colorize, attr, lambda x: x)

    all_files = get_all_files(args.overlay_dir)
    all_ebuild_paths = [f for f in all_files if f.endswith('.ebuild')]

    # ebuilds in this list are of the form 'CATEGORY/PACKAGE-VERSION.ebuild'
    all_ebuilds = ['/'.join([ebuild_path_list[-3], ebuild_path_list[-1]])
                   for ebuild_path_list in [ebpath.split('/') for ebpath in all_ebuild_paths]]
    log.debug('all_ebuilds: %s', all_ebuilds)

    msg_fmt = 'Ebuild Version Check will be run for the following overlay: {}\n'
    if args.verbose:
        print(msg_fmt.format(os.path.basename(args.overlay_dir)))

    msg_fmt = '{}:: {}'
    all_pkgs = set()
    for ebuild in sorted(all_ebuilds):
        pkg = re.sub('-([0-9])+\..*ebuild$', '', ebuild)
        log.vdebug('pkg: %s', pkg)
        if pkg in all_pkgs:
            continue

        all_pkgs.add(pkg)

        cmd_fmt = "eix --nocolor --format '<installedversions:NAMEVERSION>' {} | head -n 1"
        ps = sp.check_output(cmd_fmt.format(pkg), shell=True)
        out = ps.decode().strip()

        if not re.match('[A-z\-\d]+/[A-z\-\d]+-[\d\.]+(-r\d*)?$', out):
            print(msg_fmt.format(pkg, gutils.colorize.yellow('NOT INSTALLED')))
            continue

        version = out.split('-')[-1]
        log.debug('version: %s', version)
        if version == '9999':
            if args.live == 'y':
                print(msg_fmt.format(pkg, gutils.colorize.blue('LIVE BUILD')))
            else:
                all_pkgs.remove(pkg)
            continue

        try:
            ps = sp.check_output(['euscan', pkg])
        except sp.CalledProcessError:
            log.debug('Package: %s', pkg)
            raise

        out = ps.decode().strip()
        log.debug('Euscan Output: %s', out)

        out_list = out.split('\n')
        fail_marker = 'Upstream Version: '
        pass_marker = "Didn't find any new version"
        for line in out_list:
            if fail_marker in line:
                fail_msg_fmt = msg_fmt.format(pkg, gutils.colorize.red('FAILED  (New Version: {})'))
                match = re.search('([\d\.]+)', line)
                print(fail_msg_fmt.format(match.group()))
                break
            if pass_marker in line:
                print(msg_fmt.format(pkg, gutils.colorize.green('PASSED')))
                break
        else:
            print(msg_fmt.format(pkg, gutils.colorize.yellow('UNKNOWN')))

    if args.verbose:
        print('\nFinished. {} packages checked.'.format(len(all_pkgs)))


def get_all_files(directory):
    F = []
    for root, dirs, files in os.walk(directory):
        for name in files:
            F.append(os.path.join(root, name))
    return F


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('-D', dest='overlay_dir', default='/var/lib/layman/bbugyi200',
                        help='Location (directory path) of the portage overlay.')
    parser.add_argument('--nocolor', action='store_true', help='Disable colored output.')
    parser.add_argument('--live-builds', dest='live', action='store', choices=('y', 'n'),
                        default='n',
                        help='Show live ebuilds (i.e. ebuilds with version 9999).')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main(args)
