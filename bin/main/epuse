#!/usr/bin/env python

"""epuse is similar to the euse tool but is meant to manage per-package USE flags"""

import enum
import os
import shutil
import subprocess as sp  # noqa: F401
import sys

import gutils

#######################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/pymodules/gutils  #
#######################################################################################

log = gutils.logging.getEasyLogger(__name__)
pack_use_dir = "/etc/portage/package.use"


class Action(enum.Enum):
    enable = enum.auto()
    disable = enum.auto()
    prune = enum.auto()


def main():
    file_path = pack_use_dir + '/' + args.package

    log.debug('Args: %s', args)
    if args.category is None:
        out = sp.check_output(['ecat', args.package])
        category = out.decode().strip()
    else:
        category = args.category

    use_flags = args.use_flags

    if args.action_flag is Action.disable:
        use_flags = ['-{}'.format(uflag) for uflag in use_flags]

    action = {Action.enable: enable_flag,
              Action.disable: enable_flag,
              Action.prune: prune_flag}[args.action_flag]

    for uflag in use_flags:
        action(file_path, uflag, category)


def enable_flag(file_path, uflag, category):
    with open(file_path, 'a+') as f:
        f.seek(0)
        contents = f.read()
        if ' {}\n'.format(uflag) in contents:
            log.error('The %s USE flag is already set for %s/%s.',
                      uflag, category, args.package)
            return

        if uflag[0] == '-':
            reverse_flag = uflag[1:]
        else:
            reverse_flag = '-' + uflag

        f.seek(0)
        if reverse_flag + '\n' in contents:
            log.info("The {0}/{1} package already has the {2} USE flag set. Pruning {2} from package instead...".format(category, args.package, reverse_flag))
            prune_flag(file_path, reverse_flag, category)
            return

        f.write('%s/%s %s\n' % (category, args.package, uflag))
        log.info('The %s USE flag has been enabled for %s/%s.',
                 uflag, category, args.package)


def prune_flag(file_path, uflag, category):
    try:
        with open(file_path, 'r+') as f:
            L = []
            total_lines = 0
            for line in open(file_path):
                total_lines += 1
                if not line.endswith(uflag + '\n'):
                    L.append(line)

            if len(L) == total_lines:
                _use_flag_not_set_error(uflag, category)
                return

            _create_backup(file_path)

            f.seek(0)
            f.writelines(L)
            f.truncate()

            log.info('The %s USE flag has been pruned from %s/%s.',
                     uflag, category, args.package)
    except IOError:
        _use_flag_not_set_error(uflag, category)


def _use_flag_not_set_error(uflag, category):
    log.error('The %s USE flag is not currently set for %s/%s.',
              uflag, category, args.package)


def _create_backup(file_path):
    backup_dir = '/tmp/{}'.format(os.path.basename(sys.argv[0]))
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)

    shutil.copy(file_path, '{}/{}.backup'.format(backup_dir, args.package))


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('category', nargs='?', help='The name of the package\'s category.')
    parser.add_argument('package', help='The name of the package.')
    parser.add_argument('use_flags', nargs='+', help='The USE flag(s).')
    action_group = parser.add_mutually_exclusive_group()
    action_group.add_argument('-E', dest='action_flag', action='store_const', const=Action.enable,
                              help='Enable <use_flags> for <package>.')
    action_group.add_argument('-D', dest='action_flag', action='store_const', const=Action.disable,
                              help='Disable <use_flags> for <package>.')
    action_group.add_argument('-P', dest='action_flag', action='store_const', const=Action.prune,
                              help='Prune any mention of <use_flags> from /etc/portage/package.use/<package>.')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main()
