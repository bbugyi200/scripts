#!/bin/bash

read -r -d '' doc << EOM
Use 'stow' Command to Create Symlinks for All of My Dotfiles and Scripts
EOM

# ---------- Modules ----------
source gutils.sh

# ---------- Check if Running at Work -----------
sys_info="$(uname -a)"
if [[ "${sys_info}" == *"Darwin"* ]]; then
    at_work=true

    getopt=/usr/local/Cellar/gnu-getopt/2.33.2/bin/getopt
else
    getopt=/usr/bin/getopt
fi

projects_path="${HOME}"/Dropbox

# ---------- Function Definitions ----------
function stow_it() {
    src="$1"; shift
    target="$1"; shift

    dir="${src%/*}"
    subdir="${src##*/}"

    # So ~/.stow-global-ignore is used instead of /root/.stow-global-ignore.
    stow --dir="${dir}" --target="${target}" -"${FLAG}" "${subdir}"
}

# ---------- Parse Command-line Arguments ----------
eval set -- "$("${getopt}" -o "d,h,v" -l "debug,help,verbose" -- "$@")"

export USAGE_GRAMMAR=(
    "[-d] [-v] [STOW_FLAG]"
    "-h"
)

# shellcheck disable=SC2154
read -r -d '' help << EOM
$(usage)

${doc}

Positional Arguments:
    STOW_FLAG       Option flag to pass to the 'stow' command. Defaults to '-R'.

Optional Arguments:
    -d | --debug
        Enable debug mode.

    -h | --help
        View this help message.

    -v | --verbose
        Enable verbose output.
EOM

while [[ -n "$1" ]]; do
    case $1 in
       -d|--debug )
           debug=true
           ;;
       -h|--help )
           echo "${help}"
           exit 0
           ;;
       -v|--verbose )
           verbose=true
           ;;
       -- )
           shift
           break
           ;;
    esac
    shift
done

if [[ "${debug}" = true && "${verbose}" = true ]]; then
    PS4='$LINENO: '
    set -x
fi

if [[ -n "$1" ]]; then
    FLAG="$1"; shift
else
    FLAG=R
fi

# ---------- mkdir Commands ----------
# Make sure that certain directories are not symlinked directly.
# >>> $HOME directories
home_dirs=(".vim" ".ssh")
for D in "${home_dirs[@]}"; do
    mkdir "${home}"/"${D}" &> /dev/null
done

# >>> User Data Directories
data_dirs=("qutebrowser" "okular" "applications")
for D in "${data_dirs[@]}"; do
    mkdir "${home}"/.local/share/"${D}" &> /dev/null
done

# ---------- Main ----------
if [[ "${at_work}" != true ]]; then
    # >>> Other Directories
    mkdir -p /usr/share/rlwrap/{filters,completions} &> /dev/null

    if [[ $(hostname) == "athena" ]]; then
	    stow_it "${projects_path}/bin/cron.jobs" "/etc"
    fi

    ##### SCRIPTS
    if [[ "${sys_info}" == *"gentoo"* ]]; then
        stow_it "${projects_path}/bin/gentoo" "/usr/local/bin"
        stow_it "${projects_path}/bin/xmonad" "/usr/local/bin"
    fi
    
    if [[ "${sys_info}" == *"Debian"* ]]; then
        stow_it "${projects_path}/bin/debian" "/usr/local/bin"
    fi

    ##### MODULES / LIBRARIES / HEADERS
    stow_it "${projects_path}/lib/python" "/usr/local/lib/python"
    stow_it "${projects_path}/lib/C" "/usr/local/lib"
    stow_it "${projects_path}/lib/zsh" "/usr/local/lib"
    stow_it "${projects_path}/src" "/usr/local/src"
    stow_it "${projects_path}/include" "/usr/local/include"

    ##### DOTFILES
    stow_it "${projects_path}/usr" "/usr"
fi

##### SCRIPTS
stow_it "${projects_path}/bin/awk" "/usr/local/bin"
stow_it "${projects_path}/bin/GTD" "/usr/local/bin"
stow_it "${projects_path}/bin/main" "/usr/local/bin"
stow_it "${projects_path}/bin/tmux" "/usr/local/bin"
stow_it "${projects_path}/bin/vim" "/usr/local/bin"
stow_it "${projects_path}/bin/zathura" "/usr/local/bin"

##### DOTFILES
stow_it "${projects_path}/home" "${HOME}"
