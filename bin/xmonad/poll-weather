#!/usr/bin/env python

""" Writes a weather report to some bar using a FIFO. """

import subprocess as sp  # noqa: F401
import re
import time

import gutils

log = gutils.logging.getEasyLogger(__name__)


def run_weather_report(zipcode):
    """ Runs the 'weather-report' command.

    Returns:
        Raw output of weather-report command.
    """
    cmd_list = ['weather-report']
    opts = [zipcode, '--no-cache']
    cmd_list.extend(opts)

    for i in range(6):
        child = sp.Popen(cmd_list, stdout=sp.PIPE, stderr=sp.DEVNULL)
        out = child.communicate()[0]
        rc = child.returncode

        if rc == 0:
            log.debug('weather-report Attempt #{}: SUCCESS'.format(i + 1))
            break
        else:
            log.debug('weather-report Attempt #{}: FAILURE'.format(i + 1))
            time.sleep(2**i)

    return out.decode().strip()


def get_temp():
    """ Returns temperature. """
    temp = get_group(r'Temperature: ([0-9]+\.[0-9]) F', raw_output)
    return str(round(float(temp)))


def get_wind():
    """ Returns wind description. """
    try:
        return get_group(r'Wind: .*?([0-9\-]+ MPH)', raw_output)
    except RuntimeError as e:
        return get_group(r'Wind: (.*)', raw_output)


def get_group(pttrn, string):
    """ Returns the first group matched from a regex pattern. """
    match = re.search(pttrn, string, re.M)
    if match:
        return match.groups()[0]
    else:
        raise RuntimeError('No match found for: {}'.format(pttrn))


def format_report(loc, temp, sky, wind):
    """ Formats weather report. """
    report_fmt = '{}  |  TEMP: {} F  |  SKY: {}  |  WIND: {}'
    return report_fmt.format(loc, temp, sky, wind)


if __name__ == "__main__":
    parser = gutils.ArgumentParser(opt_args=['quiet'])
    parser.add_argument('zipcode', nargs='?', default='08060', help='zip code of location')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, quiet=args.quiet):
        raw_output = run_weather_report(args.zipcode)

        try:
            loc = get_group('Current conditions at (.*)\n', raw_output)
            temp = get_temp()
            sky = get_group(r'Sky conditions: ([A-z\s]+)', raw_output)
            wind = get_wind()
        except RuntimeError as e:
            log.error('Raw Output: {}'.format(raw_output))
            raise

        report = format_report(loc, temp, sky, wind)
        print(report)
