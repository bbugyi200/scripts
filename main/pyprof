#!/bin/bash

read -r -d '' doc << EOM
Wrapper for Python line_profile (https://github.com/rkern/line_profiler) and Python's
built-in cProfile tool.

1) If the Python script does not exist in current directory, search the filesystem for it.
2) Preface every function in Python script with @profile decorator.
3a) If using line_profile, profile Python script with 'kernprof' (save
    profiling report to a file).
3b) If using cProfile, profile Python script with 'python -m cProfile' (save
    profile stats to a file).  Then use this file  to generate a profiling report
    with Python's 'pstat' module.
4) Open the profiling report in an editor for viewing.
EOM

# ---------- Modules ----------
source gutils.sh

# ---------- Command-line Arguments ----------
eval set -- "$(getopt -o "d,h,l,p:,q,v" -l "debug,help,line,profile:,quiet,verbose" -- "$@")"

export USAGE_GRAMMAR=(
    "[-d] [-l] [-p A.py [-p B.py [...]]] [-q] [-v] MAIN.py"
    "-h"
)

# shellcheck disable=SC2154
read -r -d '' help << EOM
$(usage)

${doc}

Positional Arguments:
    MAIN.py     The script / entry-point to execute.

Optional Arguments:
    -d | --debug
        Enable debug mode.

    -h | --help
        View this help message.

    -l | --line
        Use line profiling.

    -p FILE.py | --profile FILE.py
        Decorate all functions in FILE.py with @profile before running line profiler.

    -q | --quiet
        Generate the profile report, but don't open it automatically in an editor.

    -v | --verbose
        Enable verbose output.
EOM

files_to_profile=()
while [[ -n "$1" ]]; do
    case $1 in
       -d|--debug )
           debug=true
           ;;
       -h|--help )
           echo "${help}"
           exit 0
           ;;
       -l|--line )
           use_line_profiling=true
           ;;
       -p|--profile )
           shift
           files_to_profile+=("$1")
           ;;
       -q|--quiet )
           quiet=true
           ;;
       -v|--verbose )
           verbose=true
           ;;
       -- )
           shift
           break
           ;;
    esac
    shift
done

if [[ "${debug}" = true && "${verbose}" = true ]]; then
    PS4='$LINENO: '
    set -x
fi

# ---------- Main ----------
main() {
    if [[ -z "$1" ]]; then
        die "$(usage)" 2
    fi

    if [[ "${use_line_profiling}" != true ]] && [[ "${#files_to_profile[@]}" -ne 0 ]]; then
        wmsg "The -p option has no effect unless run using the line profiler (enable with option -l)."
    fi

    exe="$1"; shift

    if [[ -f "${exe}" ]]; then
        files_to_profile+=("${exe}")
    fi

    if ! [[ -f "${exe}" ]]; then
        old_exe="${exe}"
        exe="$(command -v "${exe}")"
        [[ -f "${exe}" ]] || die "Unable to find the Python script ${old_exe}."
    fi

    if [[ "${use_line_profiling}" = true ]]; then
        run_line_profile "$@"
    else
        run_cprofile "$@"
    fi

    if [[ "${quiet}" != true ]]; then
        # shellcheck disable=SC2153
        if [[ "${EDITOR}" == *"vim" ]]; then
            editor="${vim:-vim}"
        else
            editor="${EDITOR}"
        fi

        eval "${editor} ${report}"
    fi
}

function run_line_profile() {
    for f in "${files_to_profile[@]}"; do
        ${SED} -E -i '/^def .*/i @profile' "${f}"
        ${SED} -E -i '/^    def .*/i\ \ \ \ @profile' "${f}"
        ${SED} -E -i '/^        def .*/i\ \ \ \ \ \ \ \ @profile' "${f}"
    done

    report=./line_profile_report.txt
    kernprof -v -l "${exe}" "$@" > "${report}"

    # Cleanup
    rm "$(basename "${exe}")".lprof
    for f in "${files_to_profile[@]}"; do
        ${SED} -E -i '/^\s*@profile/d' "${f}"
    done
 
    vim="vim +1 -c 'nnoremap <nowait> ] /@profile<CR>' -c 'nnoremap <nowait> [ ?@profile<CR>'"
}

function run_cprofile() {
    pstats_file=./profile
    pstats_python_code=$(cat <<END
import pstats
p = pstats.Stats('${pstats_file}')
p.strip_dirs()
p.sort_stats('tottime')
p.print_stats()
END
)

    python -m cProfile -o "${pstats_file}" "${exe}" "$@" &> /dev/null

    report=./profile_report.txt
    python -c "${pstats_python_code}" > "${report}"
}


if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
	main "$@"
fi
