#!/usr/bin/python3

""" Completes the Current Task and Starts the Next Most Urgent Task """

import os
import subprocess as sp

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

from loguru import logger as log

custom_columns = ['id', 'start.age', 'entry.age', 'depends', 'priority', 'project',
        'tags', 'recur', 'scheduled.countdown', 'due.relative', 'until.remaining',
        'description.count', 'urgency']
ready_tasks_cmd = "task rc.defaultwidth=500 rc.report.next.columns:{} "\
        "rc.verbose=nothing rc._forcecolor=no next +READY".format(','.join(custom_columns))

if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('-U', '--max-urgency-difference', nargs='?', dest='max_urg_diff',
                        default=0, metavar='UMAX',
                        help='Prompt user to select next task if its urgency is not at least UMAX '
                             'larger than the next most urgent task.')
    args = parser.parse_args()

    gutils.logging.configure(__file__, debug=args.debug, verbose=args.verbose)
    sp.call(['task', 'start.any:', 'done'])
    ready_tasks = os.popen(ready_tasks_cmd)

        first = ready_tasks.readline()
        first_urg = float(first.split()[-1])

        temp = first
        temp_urg = first_urg
        task_choices = []
        while abs(first_urg - temp_urg) <= args.max_urg_diff:
            task_choices.append(temp)
            temp = ready_tasks.readline()
            if temp:
                temp_urg = float(temp.split()[-1])
            else:
                break

        if len(task_choices) > 1 and args.max_urg_diff > 0:
            cmd_fmt = ready_tasks_cmd + ' | head -n {0:d} | rofi -p "Next Task" -dmenu'
            next_task = os.popen(cmd_fmt.format(len(task_choices))).read()
        else:
            next_task = task_choices[0]

        next_task_id = next_task.split()[0]
        sp.call(['task', 'start', next_task_id])
        sp.call(['task_refresh', '-w', '0'])
