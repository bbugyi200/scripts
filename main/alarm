#!/bin/bash

###################################################################################################
#  Countdown Script                                                                               #
#                                                                                                 #
# Takes a absolute time relative to today (or tomorrow if -T is used) and starts an alarm         #
# which counts down to the given time.                                                            #
###################################################################################################

source bugyi.sh

# My Colors
GREY="#D9D9D9"

if pgrep "xmonad" &> /dev/null; then
    xmonad_is_running=true
else
    xmonad_is_running=false
fi

if [[ "$(uname -a)" == *"Darwin"* ]]; then
    DATE="gdate"
else
    DATE="date"
fi

time_left() {
	echo "$stop_time" - "$($DATE --date="now" +%s)"
}

exit_handler() {
    printf "\n" > "$FIFO"
}

main() {
    PID_FILE=$MY_XDG_RUNTIME/pid

    [[ -d $MY_XDG_RUNTIME ]] || mkdir "$MY_XDG_RUNTIME"
    [[ -d $MY_XDG_DATA ]] || mkdir "$MY_XDG_DATA"

    if [[ "${xmonad_is_running}" = true ]]; then
        FIFO=$MY_XDG_RUNTIME/fifo
        [[ -p $FIFO ]] || mkfifo "$FIFO"
    else
        FIFO=$MY_XDG_RUNTIME/countdown.txt
        EVENT_NAME_FILE=$MY_XDG_RUNTIME/event_name.txt
    fi

    # ---------- Command Line Arguments ----------
    eval set -- "$(getopt -o "d,s,T" -l "debug,stop,tomorrow" -- "$@")"

    while [[ -n "$1" ]]; do
        case $1 in
            -d|--debug )
                PS4='$LINENO: '
                set -x;;
            -s|--stop )
                stop=true;;
            -T|--tomorrow )
                tomorrow=true;;
            -- )
                shift
                break;;
        esac
        shift
    done


    if [[ "$stop" = true ]]; then
        exec 1> /dev/null
    fi

    # ---------- Another Alarm is Already Running ----------
    if [[ -f $PID_FILE ]]; then
        if kill -0 "$(cat "$PID_FILE")" &> /dev/null; then
            echo "An alarm is already running! Stopping existing alarm!" | tee >(logger -t "$(basename "$0")")

            kill "$(cat "$PID_FILE")"

            if pgrep dunst; then
                sleep 0.5
                xdotool key ctrl+space  # Shortcut to close dunst notification
            fi
            exit 0
        fi
    fi

    if [[ "$stop" = true ]]; then
        printf "\n" > "$FIFO"
        exit 1
    fi

    echo $$ > "$PID_FILE"
    trap ':' SIGPIPE
    trap 'exit_handler; exit 1' SIGINT

    # ---------- Set Alarm Time ----------
    if [[ -z "$1" ]]; then
        alrm_time="$(echo | dmenu -p "Alarm:")"
    else
        alrm_time=$1; shift
    fi

    if [[ -z "$alrm_time" ]]; then
        exit 1
    fi

    if [[ $alrm_time == *"s" ]]; then
        stop_time=$($DATE --date="${alrm_time%s} seconds" +%s)
    elif [[ $alrm_time == *":"* ]]; then
        stop_time=$($DATE --date="$alrm_time" +%s)
        if [[ $($DATE +%s) -ge $stop_time ]] || [[ "$tomorrow" = true ]]; then
            stop_time=$($DATE --date="$alrm_time tomorrow" +%s)
        fi
    else
        stop_time=$($DATE --date="$alrm_time minutes" +%s)
    fi

    # ---------- Set Notification Message ----------
    if [[ -z "$1" ]]; then
        NOTIFICATION="THE TIMER IS DONE!"
    else
        NOTIFICATION="$1"; shift
    fi

    if [[ "${xmonad_is_running}" != true ]]; then
        notify-send -t 5000 "Alarm" "The \"${NOTIFICATION}\" alarm has been set for ${alrm_time}."
        printf "${NOTIFICATION}" > "${EVENT_NAME_FILE}"
    fi

    # ---------- Main Output ----------
    iclock="<icon=clock.xbm/>"
    while true; do
        TL=$(time_left)
        if [[ $TL -ge 3600 ]]; then
            printf "<fc=$GREY>  %d:%02d:%02d$iclock</fc>\n" $((TL/3600)) $((TL%3600/60)) $((TL%3600%60)) > "$FIFO"
        else
            printf "<fc=$GREY>  %d:%02d$iclock</fc>\n" $((TL/60)) $((TL%60)) > "$FIFO"
        fi

        sleep 1

        if [[ $TL -le 0 ]]; then
            break;
        fi
    done

    # ---------- Timer Finished ----------
    if [[ "${xmonad_is_running}" = true ]]; then
        notify_msg="${NOTIFICATION}"
    else
        notify_msg="***** ${NOTIFICATION} *****"
    fi

    notify-send -u critical -t 0 -i /usr/share/icons/gnome/16x16/status/appointment-soon.png "Alarm" "${notify_msg}"
    exit_handler
}

main "$@"
