#!/usr/bin/python3

"""Zathura Helper Script. Used to Search for and then Open Documents in Zathura."""

import os
import re
import signal
import socket
import subprocess as sp
import sys  # noqa: F401
import time

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)
xdg_data_dir = gutils.xdg.init('data')
CACHE_FILE = '{}/recently_opened_docs'.format(xdg_data_dir)
FIND_CACHE_FILE = '{}/all_docs'.format(xdg_data_dir)


def main():
    all_docs = None
    if args.generate_cache or not os.path.isfile(FIND_CACHE_FILE):
        directory_list = ['/home/bryan/Dropbox', '/home/bryan/Downloads', '/home/bryan/projects']
        if socket.gethostname() == 'athena':
            directory_list.append('/media/bryan/hercules/archive/home/bryan/Dropbox')

        cmd_list = ['find']
        cmd_list.extend(directory_list)
        cmd_list.extend(['-path', '/home/bryan/Dropbox/.dropbox.cache', '-prune', '-o'])
        cmd_list.extend(['-regex', '.*\.\(pdf\|epub\|djvu\|ps\|okular\)'])

        out = sp.check_output(cmd_list)
        all_docs = out.decode().strip()

        with open(FIND_CACHE_FILE, 'w') as f:
            f.write(all_docs)

    if args.quiet:
        sys.exit(0)

    if all_docs is None:
        out = sp.check_output(['cat', FIND_CACHE_FILE])
        all_docs = out.decode().strip()

    try:
        cmd = 'wmctrl -lx | grep "zathura\|okular" | tr -s " " | cut -d\' \' -f5- '\
              '| grep -o ".*\\.\\(pdf\\|djvu\\|epub\\|okular\\)"'
        decoded = gutils.shell(cmd)
        open_docs = decoded.split('\n')
        log.debug('Open Docs: {}'.format(' '.join(open_docs)))
    except sp.CalledProcessError:
        open_docs = None
        log.debug('No documents are currently open in zathura.')

    with open(CACHE_FILE, 'r') as f:
        cached_docs = [x.strip() for x in f.readlines()]

    ordered_docs = promote_cached_docs(all_docs.split('\n'), cached_docs)

    if open_docs:
        ordered_docs = demote_open_docs(ordered_docs, open_docs)

    pretty_docs = [re.sub('^/home/bryan/Dropbox/var/books/', '', x) for x in ordered_docs]

    if args.refresh:
        choice = ordered_docs[-1]
    else:
        ps = sp.Popen(['printf', '{}'.format('\n'.join(pretty_docs))], stdout=sp.PIPE)
        out = sp.check_output(['rofi', '-p', 'Document', '-m', '-4', '-dmenu', '-i'], stdin=ps.stdout)
        ps.wait()

        output = out.decode().strip()

        if output.startswith('/'):
            choice = output
        else:
            choice = '/home/bryan/Dropbox/var/books/{}'.format(output)

    add_to_cache(choice)

    active_window_class = gutils.shell('active_window_class')
    if active_window_class == 'Zathura':
        open_document('zathura', choice)
    elif active_window_class == 'okular':
        open_document('okular', choice, opts=['--unique'])
    else:
        open_document('okular', choice)

    time.sleep(0.2)
    sp.check_call(['fullscreen'])


def open_document(cmd, doc, *, opts=[]):
    if args.overwrite or args.refresh:
        pid = int(gutils.shell('active_window_pid'))
        log.debug('Killing Document Instance: {}'.format(pid))
        os.kill(pid, signal.SIGTERM)

    cmd_list = [cmd]
    cmd_list.extend(opts)
    cmd_list.append(doc)

    log.debug('Opening {} in {}...'.format(doc, cmd))
    sp.Popen(cmd_list, stdout=sp.DEVNULL, stderr=sp.STDOUT)


def promote_cached_docs(docs, cached_docs):
    """Docs in Cache File are Brought to the Top of the List of Options"""
    D = docs[:]
    for c in list(reversed(cached_docs)):
        if c in D:
            D.remove(c)
            D.insert(0, c)
    return D


def demote_open_docs(docs, open_docs):
    """Open Docs are Moved to the Bottom of the List of Options"""
    D = docs[:]
    E = []
    for odoc in open_docs:
        for doc in docs:
            if odoc in doc:
                try:
                    D.remove(doc)
                    E.append(doc)
                except ValueError:
                    # Protects against multiple attempts to remove the same doc which happens when
                    # the same doc is opened up in multiple different instances.
                    pass
    D.extend(E)
    return D


def add_to_cache(doc):
    """Adds/moves doc to the Top of the Cache File"""
    log.debug('Adding {} to cache file...'.format(doc))
    if os.path.isfile(CACHE_FILE):
        with open(CACHE_FILE, 'r') as f:
            cached_docs = f.read().strip().split('\n')

        if doc in cached_docs:
            cached_docs.remove(doc)

        cached_docs.insert(0, doc)

        with open(CACHE_FILE, 'w') as f:
            f.write('\n'.join(cached_docs[:100]))
    else:
        with open(CACHE_FILE, 'w') as f:
            f.write(doc)


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('-C', dest='generate_cache', action='store_true',
                        help='Re-generate the document cache (aka the "find command cache").')
    parser.add_argument('-q', '--quiet', dest='quiet', action='store_true',
                        help='Do not prompt the user to choose a document. Use with -C to '
                             'silently re-generate the document cache (aka the "find command  '
                             'cache").')
    parser.add_argument('-x', dest='overwrite', action='store_true',
                        help='Close current Zathura instance before opening new one.')
    parser.add_argument('-R', dest='refresh', action='store_true',
                        help='Closes current Zathura instance and reopens same document.')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main()
