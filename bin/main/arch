#!/usr/bin/env python

""" Archive Utility. Used to Archive and Compress Local Files and Directories. """

import argparse
import enum
import os
import shutil
import subprocess as sp
import sys


ARCH_DIR = 'archive'
GLOB_ARCH_DIR = '/media/bryan/hercules/archive'
TARGZ_FILE = '.archive.tar.gz'


class Error(Exception): pass


class Action(enum.Enum):
    """ Action Flags """
    ARCHIVE = enum.auto()
    COMPRESS = enum.auto()
    EXTRACT = enum.auto()
    GLOBAL = enum.auto()


def archive(auto_compress=False):
    """ Archive Files/Directories """
    if not args.files:
        raise Error("Must provide files/directories to archive!")

    for f in args.files:
        if not os.path.exists(f):
            raise Error("{} does not exist!".format(f))

    if not os.path.isdir(ARCH_DIR):
        auto_compress = True
        if os.path.isfile(TARGZ_FILE):
            extract(verbose=False)
        else:
            os.makedirs(ARCH_DIR)

    for f in args.files:
        shutil.move(f, ARCH_DIR)

    if auto_compress:
        compress(verbose=False)


def compress(verbose=True):
    """ Compress Archive Folder """
    flags = 'czvf' if verbose else 'czf'
    sp.check_call(['tar', flags, TARGZ_FILE, '--remove-files', ARCH_DIR])


def extract(verbose=True):
    """ Extract Archive Folder """
    flags = 'xzvf' if verbose else 'xzf'
    sp.check_call(['tar', flags, TARGZ_FILE])
    os.remove(TARGZ_FILE)


def global_archive():
    """ Add Files to Global Archive """
    if not any([os.path.isdir(ARCH_DIR), os.path.isfile(TARGZ_FILE), args.files]):
        msgfmt = "Neither an {} directory nor an {} file exist!\n\nEither create a local "\
                 "archive before using this option, or provide the file(s) you would "\
                 "like to archive as command line arguments."
        raise Error(msgfmt.format(ARCH_DIR, TARGZ_FILE))

    cwd = os.getcwd()
    global_replica = '{}/{}'.format(GLOB_ARCH_DIR, cwd[1:])
    if not os.path.isdir(global_replica):
        os.makedirs(global_replica)

    for f in args.files:
        shutil.move(f, global_replica)

    if os.path.isfile(TARGZ_FILE):
        extract(verbose=False)

    if os.path.isdir(ARCH_DIR):
        for f in os.listdir(ARCH_DIR):
            shutil.move('{}/{}'.format(ARCH_DIR, f), global_replica)
        os.rmdir(ARCH_DIR)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('files', nargs=argparse.REMAINDER, help='file(s) to archive')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('-a', dest='action', action='store_const', const=Action.ARCHIVE, help='add FILES to local archive (default)')
    group.add_argument('-A', dest='action', action='store_const', const=Action.GLOBAL, help='add FILES to global archive')
    group.add_argument('-c', dest='action', action='store_const', const=Action.COMPRESS, help='compress local archive')
    group.add_argument('-x', dest='action', action='store_const', const=Action.EXTRACT, help='extract local archive')
    group.set_defaults(action=Action.ARCHIVE)

    args = parser.parse_args()

    try:
        {Action.ARCHIVE: archive,
         Action.COMPRESS: compress,
         Action.EXTRACT: extract,
         Action.GLOBAL: global_archive}[args.action]()
    except Error as e:
        print('{}\n'.format(str(e)), file=sys.stderr)
        sys.exit(1)
