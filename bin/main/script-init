#!/bin/bash

read -r -d '' doc << EOM
Initialize a new script using a predefined template. After the new script has been initialized,
it is opened in vim.
EOM

source /home/bryan/Dropbox/scripts/modules/bash/gutils.sh

# ---------- Function Definitions ----------
function find_templates() {
    id="$1"; shift
    filetype="$1"; shift
    find /home/bryan/Dropbox/scripts/templates/"${scriptname}" -name "*${id}.${filetype}"
}

# ---------- Command-line Arguments ----------
eval set -- "$(getopt -o "d,D:,f,F:,h,N,T:,x" -l "debug,bin-directory:,filetype:,help,executable:,template-id:,use-extension:" -- "$@")"

usage="${usage} [-d] [-D BIN_SUBDIR] [-f] [-h] [-N | --executable={y|n}] [-x | --use-extension={y|n}] [-T TEMPLATE_ID] -F FILETYPE SCRIPT_NAME"
scriptname="${scriptname}"

read -r -d '' help << EOM
${doc}

${usage}
EOM

executable="y"
use_extension="n"
template_id=1
while [[ -n "$1" ]]; do
    case $1 in
       -d|--debug )
           PS4='$LINENO: '
           set -x
           ;;
       -h|--help )
           echo "$help"
           exit 0
           ;;
       -D|--bin-directory )
           shift
           BIN_SUBDIR="$1"
           ;;
       --executable )
           shift
           executable="$1"
           ;;
       -f )
           force=true
           ;;
       -F|--filetype )
           shift
           FILETYPE="$1"
           ;;
       -N )
           executable="n"
           ;;
       --use-extension )
           shift
           use_extension="$1"
           ;;
       -T|--template-id )
           shift
           template_id="$1"
           ;;
       -x )
           use_extension="y"
           ;;
       -- )
           shift
           break
           ;;
    esac
    shift
done

if [[ -z "$1" ]] || [[ -z "$FILETYPE" ]]; then
    die "${usage}" 2
fi

# ---------- Global Variables ----------
NEW_SCRIPT_NAME="$1"; shift
BIN="/home/bryan/Dropbox/scripts/bin"
EXT="${FILETYPE}"

# ---------- Main ----------
# ===== Process Filetype =====
case "$FILETYPE" in
    python )
        EXT="py"
        ;;
esac

# ===== Calculate Filesystem Paths =====
if [[ "$(pwd)" == "$BIN/"* && -z "$BIN_SUBDIR" ]] || [[ "$force" = true ]]; then
    FULL_BIN_PATH="$(pwd)"
elif [[ -z "$BIN_SUBDIR" ]]; then
    FULL_BIN_PATH="$BIN"/main
else
    FULL_BIN_PATH="$BIN"/"$BIN_SUBDIR"
fi

if [[ "$(pwd)" != "$FULL_BIN_PATH" ]]; then
    [ -d "$FULL_BIN_PATH" ] || die "The directory $FULL_BIN_PATH does NOT exist." 
    cd "$FULL_BIN_PATH" || exit 1
    imsg "Entering $FULL_BIN_PATH."
fi

if [[ "${use_extension}" == "y" || "${use_extension}" == "yes" ]]; then
    FULL_NEW_SCRIPT_NAME="${NEW_SCRIPT_NAME}.${EXT}"
else
    FULL_NEW_SCRIPT_NAME="${NEW_SCRIPT_NAME}"
fi

number_of_templates="$(find_templates "${template_id}" "${FILETYPE}" | wc -l)"
if [[ "${number_of_templates}" -eq 0 ]]; then
    die "Failed to find any matching templates."
elif [[ "${number_of_templates}" -gt 1 ]]; then
    die "Multiple templates matched. Template must be unique."
fi

FULL_TEMPLATE_NAME=$(find_templates "${template_id}" "${FILETYPE}")
imsg "Found matching template: $(basename "${FULL_TEMPLATE_NAME}")"

# ===== Initialize New Script =====
# >>> Copy Template Contents to New Script
if ! [[ -f "$FULL_NEW_SCRIPT_NAME" ]]; then
    imsg "Initializing the '$FULL_NEW_SCRIPT_NAME' script."
    sudo cp "${FULL_TEMPLATE_NAME}" "${FULL_NEW_SCRIPT_NAME}"
    sudo chown bryan:bryan "${FULL_NEW_SCRIPT_NAME}"
else
    imsg "The '$FULL_NEW_SCRIPT_NAME' script already exists."
fi

# >>> Make New Script Executable
if [[ "${executable}" == "y" || "${executable}" == "yes" ]]; then
    sudo chmod +x "$FULL_NEW_SCRIPT_NAME"
    clinks
fi

# ===== Render Template Engine =====
# >>> START
start_mark="{# START #}"
start_line="$(ag "${start_mark}" "${FULL_NEW_SCRIPT_NAME}" | awk -F':' '{print $1}')"
sed -i "s/${start_mark}//" "${FULL_NEW_SCRIPT_NAME}"

# >>> Environment Variable Replacements
grep_epttrn="{{ env\.(.*?) }}"
sed_epttrn="{{ env\.\([^ ]*\) }}"
while read evar; do
    evalue="$(eval "echo \"\$${evar}\"")"
    if [[ -z "${evalue}" ]]; then
        die "Environment variable NOT defined: \$${evar}"
    fi

    sed -i "s/${sed_epttrn}/${evalue}/" "${FULL_NEW_SCRIPT_NAME}"
done < <(grep -P -o "${grep_epttrn}" "${FULL_NEW_SCRIPT_NAME}" | sed "s/${sed_epttrn}/\1/")


# ===== Open New Script in Editor =====
Vim_Opts=()
if [[ -n "${start_line}" ]]; then
    Vim_Opts+=( +"${start_line}" +startinsert )
fi

vim "${Vim_Opts[@]}" "${FULL_NEW_SCRIPT_NAME}"
