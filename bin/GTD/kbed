#!/usr/bin/env python

"""Sets LOW, EOS, and BED times in khal based off of BED time only."""

import datetime as dt
import subprocess as sp  # noqa: F401

from dateutil.parser import parse

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)


def main(args):
    bed_dt = parse(args.bedtime)
    now_dt = dt.datetime.now()

    tomorrow = args.tomorrow or bed_dt < now_dt
    if tomorrow:
        bed_dt = bed_dt + dt.timedelta(days=1)

    log.debug('bed_dt: %s', bed_dt)

    eos_dt = bed_dt - dt.timedelta(hours=3)
    low_dt = bed_dt - dt.timedelta(hours=7)

    for event_dt, event_name in [(low_dt, 'LOW'), (eos_dt, 'EOS'), (bed_dt, 'BED')]:
        set_khal_event(event_dt, event_name)

    sp.Popen(['calalrms'], stdout=sp.DEVNULL, stderr=sp.STDOUT)


def set_khal_event(event_dt, event_name):
    # Delete all other Khal events with that same event name.
    sp.check_call(['kdel', event_name])

    cmd_list = ['khal', 'new', '-a', 'daily']
    cmd_list.append(event_dt.strftime('%Y-%m-%dT%H:%M'))
    cmd_list.append(event_name)
    sp.check_call(cmd_list)


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('bedtime', help="Time to use for BED (HH:MM).")
    parser.add_argument('-T', '--tomorrow', action='store_true',
                        help="Force BED event to be scheduled for tomorrow.")
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main(args)
