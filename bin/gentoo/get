#!/usr/bin/env python

"""Wrapper for 'emerge' that Installs Package(s)"""

import argparse
import os
import subprocess as sp  # noqa: F401
import sys

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/scripts/tree/master/modules/python/gutils  #
############################################################################################

log = gutils.logging.getEasyLogger(__name__)


def main(args):
    if not args.install:
        add_to_set(args.packages, local=args.local)
        sys.exit(0)

    ask = not args.force
    emerge_cmd = get_emerge_cmd_list(args.packages, ask=ask)

    log.debug('Emerge Command: %s', emerge_cmd)
    rc = sp.call(emerge_cmd)

    if rc == 1:
        log.debug('Checking for meta diff config files.')
        out = sp.check_output('find /etc/portage -name "._cfg0000*"', shell=True)
        cfg_fnames = out.decode().strip()

        if cfg_fnames != '':
            log.debug('Merging config files.')
            try:
                cmd_fmt = 'sudo dispatch-conf && clear && {}'
                emerge_cmd = get_emerge_cmd_list(args.packages, ask=False)
                emerge_cmd_string = ' '.join(emerge_cmd)
                rc = sp.check_call(cmd_fmt.format(emerge_cmd_string), shell=True)
            except sp.CalledProcessError:
                pass

    if rc == 0:
        gutils.emsg('Calling updatedb to update its databases.')
        sp.check_call(['updatedb'])
        if not args.oneshot:
            add_to_set(args.packages, local=args.local)

    sys.exit(rc)


def get_emerge_cmd_list(packages, *, ask=True):
    cmd_list = ['sudo', 'emerge']

    opts = ['--oneshot']
    if ask:
        opts.append('--ask')

    cmd_list.extend(opts)
    cmd_list.extend(packages)
    return cmd_list


def add_to_set(packages, *, local=False):
    hostname = os.uname().nodename

    set_folder = '/etc/portage/sets'
    set_fpath = '{}/{}'.format(set_folder, hostname if local else 'shared')
    bad_set_fpath = '{}/{}'.format(set_folder, 'shared' if local else hostname)

    with open(set_fpath, 'r') as f:
        lines = f.readlines()

    for package in packages:
        if '/' in package:
            full_package_name = package
        else:
            out = sp.check_output(['ecat', package])
            category = out.decode().strip()

            try:
                assert len(category) > 0, "Package category cannot be blank."
                assert len(package) > 0, "Package cannot be blank."
            except AssertionError as e:
                raise ValueError(str(e))

            full_package_name = '{}/{}'.format(category, package)

        log.debug('Full Package Name: %s', full_package_name)
        lines.append(full_package_name + '\n')

        portage_set = set_fpath.split('/')[-1]
        gutils.emsg('Adding {} to @{}.'.format(package, portage_set))

        # Remove the package name from the world file to ensure that packages are never listed in
        # both @shared and the world file.
        cmd_fmt = 'sed -i "\|{}|d" {}'
        sp.check_call(cmd_fmt.format(full_package_name, bad_set_fpath), shell=True)

    with open(set_fpath, 'w') as f:
        f.writelines(sorted(set(lines)))


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('packages', nargs=argparse.REMAINDER, help='Package(s) to install.')
    parser.add_argument('-1', '--oneshot', action='store_true',
                        help='Do NOT add package to @world.')
    parser.add_argument('-f', '--force', action='store_true',
                        help='Install package(s) without using the --ask option.')
    parser.add_argument('-n', '--no-install', dest='install', action='store_false',
                        help='Do not install package(s). Only add them to @shared or (if -L '
                             'option is given) @<hostname> set.')
    parser.add_argument('-L', '--local-only', dest='local', action='store_true',
                        help='Add package(s) to @<hostname> set ONLY.')
    args = parser.parse_args()

    with gutils.logging.context(log, debug=args.debug, verbose=args.verbose):
        main(args)
