#!/usr/bin/python3

"""Clears .weechat/highlights.txt of Duplicate Lines and Opens in vim"""

import re
import subprocess as sp  # noqa: F401

from dateutil.parser import parse

import gutils

############################################################################################
#  gutils library: https://github.com/bbugyi200/pylibs/tree/master/gutils                  #
############################################################################################

from loguru import logger as log


def main(args):
    fp_highlights = '/home/bryan/.weechat/highlights.txt'
    fp_tmp = '/tmp/weechat-highlights.txt'
    format_results(fp_highlights, fp_tmp,
                   username=args.username,
                   buffer_=args.buffer,
                   daterange=args.daterange)

    gutils.shell('vim + {}'.format(fp_tmp))


def format_results(fp, fp_tmp, **kwargs):
    stripped_lines = []
    full_lines = []

    for L in open(fp, 'r'):
        conditions = get_conditions(L, **kwargs)

        S = L[L.index('('):]
        conditions.append(S not in stripped_lines)

        if all(conditions):
            stripped_lines.append(S)
            NL = L
            NL = re.sub('\[[0-9:]+\] ', '', NL)
            NL = re.sub('(\([#A-z0-9]+\)) ([A-z\-0-9]+): (.*)', '\\1 <\\2>\n\t\\3\n', NL)
            full_lines.append(NL)

    with open(fp_tmp, 'w') as f:
        f.write('# vim: filetype=weechat\n\n')

    with open(fp_tmp, 'a+') as f:
        f.writelines(full_lines)


def get_conditions(line, username=None, buffer_=None, daterange=None):
    conditions = [
        '(BNC) ' not in line,
        'has joined #' not in line,
        'disconnected from server' not in line,
    ]

    if username is not None:
        conditions.append('{}:'.format(username) in line)

    if buffer_ is not None:
        conditions.append('(#{})'.format(buffer_) in line)

    if daterange is not None:
        start_dt = parse(daterange[0])
        end_dt = parse(daterange[1])
        D = parse(line[:line.index(']')][1:])

        conditions.append(start_dt <= D)
        conditions.append(D <= end_dt)

    return conditions


if __name__ == "__main__":
    parser = gutils.ArgumentParser()
    parser.add_argument('-u', dest='username', help='IRC Username.')
    parser.add_argument('-b', dest='buffer', help='IRC Buffer.')
    parser.add_argument('-D', nargs=2, dest='daterange',
                        metavar=('START', 'END'),
                        help='Show only messages sent between this range of dates.')
    args = parser.parse_args()

    gutils.logging.configure(__name__, debug=args.debug, verbose=args.verbose)
    main(args)
